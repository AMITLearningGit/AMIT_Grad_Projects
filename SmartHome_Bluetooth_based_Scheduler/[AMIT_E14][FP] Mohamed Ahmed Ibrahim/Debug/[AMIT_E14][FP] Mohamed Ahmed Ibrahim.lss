
[AMIT_E14][FP] Mohamed Ahmed Ibrahim.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  00000e9c  00000f30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  008000b8  008000b8  00000f88  2**0
                  ALLOC
  3 .stab         0000216c  00000000  00000000  00000f88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007da  00000000  00000000  000030f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000038ce  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002c8  00000000  00000000  000038fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000226e  00000000  00000000  00003bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000c92  00000000  00000000  00005e33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ccf  00000000  00000000  00006ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000041c  00000000  00000000  00007794  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000007b4  00000000  00000000  00007bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000dc6  00000000  00000000  00008364  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001c0  00000000  00000000  0000912a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3b       	cpi	r26, 0xB8	; 184
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 eb       	ldi	r26, 0xB8	; 184
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3d       	cpi	r26, 0xD2	; 210
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1e 05 	call	0xa3c	; 0xa3c <main>
  8a:	0c 94 4c 07 	jmp	0xe98	; 0xe98 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:

uint16 ADC_Value = 0;

void ADC_Init(void)
{
	SET_BIT(ADCSRA,1);
  92:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA,2);
  94:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADMUX,6);
  96:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADCSRA,7);
  98:	37 9a       	sbi	0x06, 7	; 6
  9a:	08 95       	ret

0000009c <ADC_Conversion>:
uint16 ADC_Conversion(ADC_Channel_t Channel)
{
	
	uint16 ADC_Value;
	
	ADMUX &= 0b11100000;
  9c:	97 b1       	in	r25, 0x07	; 7
  9e:	90 7e       	andi	r25, 0xE0	; 224
  a0:	97 b9       	out	0x07, r25	; 7
	
	switch (Channel)
  a2:	84 30       	cpi	r24, 0x04	; 4
  a4:	a1 f0       	breq	.+40     	; 0xce <ADC_Conversion+0x32>
  a6:	30 f4       	brcc	.+12     	; 0xb4 <ADC_Conversion+0x18>
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	61 f0       	breq	.+24     	; 0xc4 <ADC_Conversion+0x28>
  ac:	68 f4       	brcc	.+26     	; 0xc8 <ADC_Conversion+0x2c>
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	c9 f4       	brne	.+50     	; 0xe4 <ADC_Conversion+0x48>
  b2:	06 c0       	rjmp	.+12     	; 0xc0 <ADC_Conversion+0x24>
  b4:	86 30       	cpi	r24, 0x06	; 6
  b6:	81 f0       	breq	.+32     	; 0xd8 <ADC_Conversion+0x3c>
  b8:	60 f0       	brcs	.+24     	; 0xd2 <ADC_Conversion+0x36>
  ba:	87 30       	cpi	r24, 0x07	; 7
  bc:	99 f4       	brne	.+38     	; 0xe4 <ADC_Conversion+0x48>
  be:	0f c0       	rjmp	.+30     	; 0xde <ADC_Conversion+0x42>
	{
		
		case ADC0 :
		break;
		case ADC1 :	SET_BIT(ADMUX,0);
  c0:	38 9a       	sbi	0x07, 0	; 7
		break;
  c2:	10 c0       	rjmp	.+32     	; 0xe4 <ADC_Conversion+0x48>
		case ADC2 :	SET_BIT(ADMUX,1);
  c4:	39 9a       	sbi	0x07, 1	; 7
		break;
  c6:	0e c0       	rjmp	.+28     	; 0xe4 <ADC_Conversion+0x48>
		case ADC3 :	SET_BIT(ADMUX,1);SET_BIT(ADMUX,0);
  c8:	39 9a       	sbi	0x07, 1	; 7
  ca:	38 9a       	sbi	0x07, 0	; 7
		break;
  cc:	0b c0       	rjmp	.+22     	; 0xe4 <ADC_Conversion+0x48>
		case ADC4 :	SET_BIT(ADMUX,2);
  ce:	3a 9a       	sbi	0x07, 2	; 7
		break;
  d0:	09 c0       	rjmp	.+18     	; 0xe4 <ADC_Conversion+0x48>
		case ADC5 :	SET_BIT(ADMUX,2);SET_BIT(ADMUX,0);
  d2:	3a 9a       	sbi	0x07, 2	; 7
  d4:	38 9a       	sbi	0x07, 0	; 7
		break;
  d6:	06 c0       	rjmp	.+12     	; 0xe4 <ADC_Conversion+0x48>
		case ADC6 :	SET_BIT(ADMUX,2);SET_BIT(ADMUX,1);
  d8:	3a 9a       	sbi	0x07, 2	; 7
  da:	39 9a       	sbi	0x07, 1	; 7
		break;
  dc:	03 c0       	rjmp	.+6      	; 0xe4 <ADC_Conversion+0x48>
		case ADC7 :	SET_BIT(ADMUX,2);SET_BIT(ADMUX,1);SET_BIT(ADMUX,0);
  de:	3a 9a       	sbi	0x07, 2	; 7
  e0:	39 9a       	sbi	0x07, 1	; 7
  e2:	38 9a       	sbi	0x07, 0	; 7
		default:
		break;
	}
	
	
	SET_BIT(ADCSRA,6);
  e4:	36 9a       	sbi	0x06, 6	; 6
	
	while(1)
	{
		if (LOW==READ_BIT(ADCSRA,6))
  e6:	36 99       	sbic	0x06, 6	; 6
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <ADC_Conversion+0x4a>
		{
			ADC_Value=ADC;
  ea:	24 b1       	in	r18, 0x04	; 4
  ec:	35 b1       	in	r19, 0x05	; 5
			break;
		}
	}
	
	return ADC_Value;
}
  ee:	82 2f       	mov	r24, r18
  f0:	93 2f       	mov	r25, r19
  f2:	08 95       	ret

000000f4 <Lcd_Data>:


uint8 ASCII[5];

void Lcd_Data(uint8 data)
{
  f4:	cf 93       	push	r28
  f6:	c8 2f       	mov	r28, r24
	if(data & 1)
  f8:	80 ff       	sbrs	r24, 0
  fa:	06 c0       	rjmp	.+12     	; 0x108 <Lcd_Data+0x14>
	Dio_WritePin(PA,4,1);
  fc:	41 e0       	ldi	r20, 0x01	; 1
  fe:	64 e0       	ldi	r22, 0x04	; 4
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
 106:	05 c0       	rjmp	.+10     	; 0x112 <Lcd_Data+0x1e>
	else
	Dio_WritePin(PA,4,0);
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	64 e0       	ldi	r22, 0x04	; 4
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
	
	if(data & 2)
 112:	c1 ff       	sbrs	r28, 1
 114:	06 c0       	rjmp	.+12     	; 0x122 <Lcd_Data+0x2e>
	Dio_WritePin(PA,5,1);
 116:	41 e0       	ldi	r20, 0x01	; 1
 118:	65 e0       	ldi	r22, 0x05	; 5
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
 120:	05 c0       	rjmp	.+10     	; 0x12c <Lcd_Data+0x38>
	else
	Dio_WritePin(PA,5,0);
 122:	40 e0       	ldi	r20, 0x00	; 0
 124:	65 e0       	ldi	r22, 0x05	; 5
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
	
	if(data & 4)
 12c:	c2 ff       	sbrs	r28, 2
 12e:	06 c0       	rjmp	.+12     	; 0x13c <Lcd_Data+0x48>
	Dio_WritePin(PA,6,1);
 130:	41 e0       	ldi	r20, 0x01	; 1
 132:	66 e0       	ldi	r22, 0x06	; 6
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
 13a:	05 c0       	rjmp	.+10     	; 0x146 <Lcd_Data+0x52>
	else
	Dio_WritePin(PA,6,0);
 13c:	40 e0       	ldi	r20, 0x00	; 0
 13e:	66 e0       	ldi	r22, 0x06	; 6
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
	
	if(data & 8)
 146:	c3 ff       	sbrs	r28, 3
 148:	06 c0       	rjmp	.+12     	; 0x156 <Lcd_Data+0x62>
	Dio_WritePin(PA,7,1);
 14a:	41 e0       	ldi	r20, 0x01	; 1
 14c:	67 e0       	ldi	r22, 0x07	; 7
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
 154:	05 c0       	rjmp	.+10     	; 0x160 <Lcd_Data+0x6c>
	else
	Dio_WritePin(PA,7,0);
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	67 e0       	ldi	r22, 0x07	; 7
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
}
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <Lcd_command>:
void Lcd_command(uint8 a)
{
 164:	cf 93       	push	r28
 166:	c8 2f       	mov	r28, r24
	Dio_WritePin(PB,1,0);             // => PB,1 = 0
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
	Lcd_Data(a);
 172:	8c 2f       	mov	r24, r28
 174:	0e 94 7a 00 	call	0xf4	; 0xf4 <Lcd_Data>
	Dio_WritePin(PB,3,1);            // => E = 1
 178:	41 e0       	ldi	r20, 0x01	; 1
 17a:	63 e0       	ldi	r22, 0x03	; 3
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	87 eb       	ldi	r24, 0xB7	; 183
 184:	9b e0       	ldi	r25, 0x0B	; 11
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <Lcd_command+0x22>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <Lcd_command+0x28>
 18c:	00 00       	nop
	_delay_ms(1);
	Dio_WritePin(PB,3,0);             // => E = 0
 18e:	40 e0       	ldi	r20, 0x00	; 0
 190:	63 e0       	ldi	r22, 0x03	; 3
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
 198:	87 eb       	ldi	r24, 0xB7	; 183
 19a:	9b e0       	ldi	r25, 0x0B	; 11
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <Lcd_command+0x38>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <Lcd_command+0x3e>
 1a2:	00 00       	nop
	_delay_ms(1);
}
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <Lcd_Clear>:

void Lcd_Clear(void)
{
	Lcd_command(0);
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	0e 94 b2 00 	call	0x164	; 0x164 <Lcd_command>
	Lcd_command(1);
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 b2 00 	call	0x164	; 0x164 <Lcd_command>
 1b4:	08 95       	ret

000001b6 <Lcd_Set_Cursor>:
}

void Lcd_Set_Cursor(uint8 a, uint8 b)
{
 1b6:	cf 93       	push	r28
 1b8:	c6 2f       	mov	r28, r22
	uint8 temp,z,y;
	if(a == 1)
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	59 f4       	brne	.+22     	; 0x1d4 <Lcd_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
 1be:	86 2f       	mov	r24, r22
 1c0:	80 58       	subi	r24, 0x80	; 128
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd_command(z);
 1c2:	82 95       	swap	r24
 1c4:	8f 70       	andi	r24, 0x0F	; 15
 1c6:	0e 94 b2 00 	call	0x164	; 0x164 <Lcd_command>
		Lcd_command(y);
 1ca:	8c 2f       	mov	r24, r28
 1cc:	8f 70       	andi	r24, 0x0F	; 15
 1ce:	0e 94 b2 00 	call	0x164	; 0x164 <Lcd_command>
 1d2:	0c c0       	rjmp	.+24     	; 0x1ec <Lcd_Set_Cursor+0x36>
	}
	else if(a == 2)
 1d4:	82 30       	cpi	r24, 0x02	; 2
 1d6:	51 f4       	brne	.+20     	; 0x1ec <Lcd_Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
 1d8:	86 2f       	mov	r24, r22
 1da:	80 54       	subi	r24, 0x40	; 64
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd_command(z);
 1dc:	82 95       	swap	r24
 1de:	8f 70       	andi	r24, 0x0F	; 15
 1e0:	0e 94 b2 00 	call	0x164	; 0x164 <Lcd_command>
		Lcd_command(y);
 1e4:	8c 2f       	mov	r24, r28
 1e6:	8f 70       	andi	r24, 0x0F	; 15
 1e8:	0e 94 b2 00 	call	0x164	; 0x164 <Lcd_command>
	}
}
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <Lcd_Init>:

void Lcd_Init(void)
{
	Lcd_Data(0x00);
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	0e 94 7a 00 	call	0xf4	; 0xf4 <Lcd_Data>
 1f6:	8f e5       	ldi	r24, 0x5F	; 95
 1f8:	9a ee       	ldi	r25, 0xEA	; 234
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <Lcd_Init+0xa>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <Lcd_Init+0x10>
 200:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd_command(0x03);
 202:	83 e0       	ldi	r24, 0x03	; 3
 204:	0e 94 b2 00 	call	0x164	; 0x164 <Lcd_command>
 208:	87 e9       	ldi	r24, 0x97	; 151
 20a:	9a e3       	ldi	r25, 0x3A	; 58
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <Lcd_Init+0x1c>
 210:	00 c0       	rjmp	.+0      	; 0x212 <Lcd_Init+0x22>
 212:	00 00       	nop
	_delay_ms(5);
	Lcd_command(0x03);
 214:	83 e0       	ldi	r24, 0x03	; 3
 216:	0e 94 b2 00 	call	0x164	; 0x164 <Lcd_command>
 21a:	87 ee       	ldi	r24, 0xE7	; 231
 21c:	90 e8       	ldi	r25, 0x80	; 128
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <Lcd_Init+0x2e>
 222:	00 c0       	rjmp	.+0      	; 0x224 <Lcd_Init+0x34>
 224:	00 00       	nop
	_delay_ms(11);
	Lcd_command(0x03);
 226:	83 e0       	ldi	r24, 0x03	; 3
 228:	0e 94 b2 00 	call	0x164	; 0x164 <Lcd_command>
	/////////////////////////////////////////////////////
	Lcd_command(0x02);
 22c:	82 e0       	ldi	r24, 0x02	; 2
 22e:	0e 94 b2 00 	call	0x164	; 0x164 <Lcd_command>
	Lcd_command(0x02);
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	0e 94 b2 00 	call	0x164	; 0x164 <Lcd_command>
	Lcd_command(0x08);
 238:	88 e0       	ldi	r24, 0x08	; 8
 23a:	0e 94 b2 00 	call	0x164	; 0x164 <Lcd_command>
	Lcd_command(0x00);
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	0e 94 b2 00 	call	0x164	; 0x164 <Lcd_command>
	Lcd_command(0x0C);
 244:	8c e0       	ldi	r24, 0x0C	; 12
 246:	0e 94 b2 00 	call	0x164	; 0x164 <Lcd_command>
	Lcd_command(0x00);
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	0e 94 b2 00 	call	0x164	; 0x164 <Lcd_command>
	Lcd_command(0x06);
 250:	86 e0       	ldi	r24, 0x06	; 6
 252:	0e 94 b2 00 	call	0x164	; 0x164 <Lcd_command>
 256:	08 95       	ret

00000258 <Lcd_Write_Char>:
}

void Lcd_Write_Char(uint8 a)
{
 258:	cf 93       	push	r28
 25a:	c8 2f       	mov	r28, r24
	uint8 temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	Dio_WritePin(PB,1,1);             // => PB,1 = 1
 25c:	41 e0       	ldi	r20, 0x01	; 1
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
	Lcd_Data(y>>4);             //Data transfer
 266:	8c 2f       	mov	r24, r28
 268:	82 95       	swap	r24
 26a:	8f 70       	andi	r24, 0x0F	; 15
 26c:	0e 94 7a 00 	call	0xf4	; 0xf4 <Lcd_Data>
	Dio_WritePin(PB,3,1);
 270:	41 e0       	ldi	r20, 0x01	; 1
 272:	63 e0       	ldi	r22, 0x03	; 3
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
 27a:	87 eb       	ldi	r24, 0xB7	; 183
 27c:	9b e0       	ldi	r25, 0x0B	; 11
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <Lcd_Write_Char+0x26>
 282:	00 c0       	rjmp	.+0      	; 0x284 <Lcd_Write_Char+0x2c>
 284:	00 00       	nop
	_delay_ms(1);
	Dio_WritePin(PB,3,0);
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	63 e0       	ldi	r22, 0x03	; 3
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
 290:	87 eb       	ldi	r24, 0xB7	; 183
 292:	9b e0       	ldi	r25, 0x0B	; 11
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <Lcd_Write_Char+0x3c>
 298:	00 c0       	rjmp	.+0      	; 0x29a <Lcd_Write_Char+0x42>
 29a:	00 00       	nop
	_delay_ms(1);
	Lcd_Data(temp);
 29c:	8c 2f       	mov	r24, r28
 29e:	8f 70       	andi	r24, 0x0F	; 15
 2a0:	0e 94 7a 00 	call	0xf4	; 0xf4 <Lcd_Data>
	Dio_WritePin(PB,3,1);
 2a4:	41 e0       	ldi	r20, 0x01	; 1
 2a6:	63 e0       	ldi	r22, 0x03	; 3
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
 2ae:	87 eb       	ldi	r24, 0xB7	; 183
 2b0:	9b e0       	ldi	r25, 0x0B	; 11
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <Lcd_Write_Char+0x5a>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <Lcd_Write_Char+0x60>
 2b8:	00 00       	nop
	_delay_ms(1);
	Dio_WritePin(PB,3,0);
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	63 e0       	ldi	r22, 0x03	; 3
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
 2c4:	87 eb       	ldi	r24, 0xB7	; 183
 2c6:	9b e0       	ldi	r25, 0x0B	; 11
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <Lcd_Write_Char+0x70>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <Lcd_Write_Char+0x76>
 2ce:	00 00       	nop
	_delay_ms(1);
}
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <Lcd_Write_String>:

void Lcd_Write_String(uint8 *a)
{
 2d4:	1f 93       	push	r17
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	ec 01       	movw	r28, r24
	uint8 i;
	for(i=0;a[i]!='\0';i++)
 2dc:	88 81       	ld	r24, Y
 2de:	88 23       	and	r24, r24
 2e0:	51 f0       	breq	.+20     	; 0x2f6 <Lcd_Write_String+0x22>
 2e2:	10 e0       	ldi	r17, 0x00	; 0
	Lcd_Write_Char(a[i]);
 2e4:	0e 94 2c 01 	call	0x258	; 0x258 <Lcd_Write_Char>
}

void Lcd_Write_String(uint8 *a)
{
	uint8 i;
	for(i=0;a[i]!='\0';i++)
 2e8:	1f 5f       	subi	r17, 0xFF	; 255
 2ea:	fe 01       	movw	r30, r28
 2ec:	e1 0f       	add	r30, r17
 2ee:	f1 1d       	adc	r31, r1
 2f0:	80 81       	ld	r24, Z
 2f2:	81 11       	cpse	r24, r1
 2f4:	f7 cf       	rjmp	.-18     	; 0x2e4 <Lcd_Write_String+0x10>
	Lcd_Write_Char(a[i]);
}
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	1f 91       	pop	r17
 2fc:	08 95       	ret

000002fe <NUM_to_ASCII>:
	Lcd_command(0x08);
}
//End LCD 4 Bit Interfacing Functions

void NUM_to_ASCII(uint16 NUM)
{
 2fe:	ac 01       	movw	r20, r24

	uint8 asccc[4]={0};
	uint8 No_Digit;

	asccc[0]	= NUM/1000;
 300:	9c 01       	movw	r18, r24
 302:	36 95       	lsr	r19
 304:	27 95       	ror	r18
 306:	36 95       	lsr	r19
 308:	27 95       	ror	r18
 30a:	36 95       	lsr	r19
 30c:	27 95       	ror	r18
 30e:	a5 ec       	ldi	r26, 0xC5	; 197
 310:	b0 e2       	ldi	r27, 0x20	; 32
 312:	0e 94 40 07 	call	0xe80	; 0xe80 <__umulhisi3>
 316:	92 95       	swap	r25
 318:	82 95       	swap	r24
 31a:	8f 70       	andi	r24, 0x0F	; 15
 31c:	89 27       	eor	r24, r25
 31e:	9f 70       	andi	r25, 0x0F	; 15
 320:	89 27       	eor	r24, r25
	asccc[0]	+=  48;      // :ASCII of 0 = 48
 322:	e8 2f       	mov	r30, r24
 324:	e0 5d       	subi	r30, 0xD0	; 208
	uint16 val1	= NUM%1000;
 326:	68 ee       	ldi	r22, 0xE8	; 232
 328:	73 e0       	ldi	r23, 0x03	; 3
 32a:	86 9f       	mul	r24, r22
 32c:	90 01       	movw	r18, r0
 32e:	87 9f       	mul	r24, r23
 330:	30 0d       	add	r19, r0
 332:	96 9f       	mul	r25, r22
 334:	30 0d       	add	r19, r0
 336:	11 24       	eor	r1, r1
 338:	42 1b       	sub	r20, r18
 33a:	53 0b       	sbc	r21, r19
	
	asccc[1]	= val1/100;
 33c:	9a 01       	movw	r18, r20
 33e:	36 95       	lsr	r19
 340:	27 95       	ror	r18
 342:	36 95       	lsr	r19
 344:	27 95       	ror	r18
 346:	ab e7       	ldi	r26, 0x7B	; 123
 348:	b4 e1       	ldi	r27, 0x14	; 20
 34a:	0e 94 40 07 	call	0xe80	; 0xe80 <__umulhisi3>
 34e:	96 95       	lsr	r25
 350:	87 95       	ror	r24
	asccc[1]	+=  48;
 352:	f8 2f       	mov	r31, r24
 354:	f0 5d       	subi	r31, 0xD0	; 208
	val1		= val1%100;
 356:	64 e6       	ldi	r22, 0x64	; 100
 358:	68 9f       	mul	r22, r24
 35a:	90 01       	movw	r18, r0
 35c:	69 9f       	mul	r22, r25
 35e:	30 0d       	add	r19, r0
 360:	11 24       	eor	r1, r1
 362:	42 1b       	sub	r20, r18
 364:	53 0b       	sbc	r21, r19
	
	asccc[2]	= val1/10;
 366:	9a 01       	movw	r18, r20
 368:	ad ec       	ldi	r26, 0xCD	; 205
 36a:	bc ec       	ldi	r27, 0xCC	; 204
 36c:	0e 94 40 07 	call	0xe80	; 0xe80 <__umulhisi3>
 370:	96 95       	lsr	r25
 372:	87 95       	ror	r24
 374:	96 95       	lsr	r25
 376:	87 95       	ror	r24
 378:	96 95       	lsr	r25
 37a:	87 95       	ror	r24
	asccc[2]	+=  48;
 37c:	68 2f       	mov	r22, r24
 37e:	60 5d       	subi	r22, 0xD0	; 208
	val1		= val1%10;
 380:	9c 01       	movw	r18, r24
 382:	22 0f       	add	r18, r18
 384:	33 1f       	adc	r19, r19
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	82 0f       	add	r24, r18
 394:	93 1f       	adc	r25, r19
 396:	48 1b       	sub	r20, r24
 398:	59 0b       	sbc	r21, r25
	
	asccc[3]	= val1/1;
	asccc[3]	+=  48;
 39a:	40 5d       	subi	r20, 0xD0	; 208
	val1		= val1%1;
	
	for (No_Digit=0;No_Digit<=3;No_Digit++)
	{
		ASCII[No_Digit] = asccc[No_Digit];
 39c:	e0 93 ca 00 	sts	0x00CA, r30
 3a0:	f0 93 cb 00 	sts	0x00CB, r31
 3a4:	60 93 cc 00 	sts	0x00CC, r22
 3a8:	40 93 cd 00 	sts	0x00CD, r20
	}
	
	ASCII[4] = '\0';
 3ac:	10 92 ce 00 	sts	0x00CE, r1
 3b0:	08 95       	ret

000003b2 <bluetooth>:
#include "Dio_cfg.h"
#include "UART.h"


void bluetooth (uint8 text)
{
 3b2:	cf 93       	push	r28
 3b4:	c8 2f       	mov	r28, r24
	UART_Init();
 3b6:	0e 94 10 05 	call	0xa20	; 0xa20 <UART_Init>
	UART_Send_data(text);
 3ba:	8c 2f       	mov	r24, r28
 3bc:	0e 94 1a 05 	call	0xa34	; 0xa34 <UART_Send_data>
}
 3c0:	cf 91       	pop	r28
 3c2:	08 95       	ret

000003c4 <Button0_Task>:
{
	static uint8 Count0 = 0;
	static uint8 Old_Button0 = 0;
	uint8 New_Button0 = 0;
	
	New_Button0 = Dio_ReadPin(PD,0);
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	83 e0       	ldi	r24, 0x03	; 3
 3c8:	0e 94 c3 02 	call	0x586	; 0x586 <Dio_ReadPin>
	
	if (Old_Button0 == New_Button0)
 3cc:	90 91 b8 00 	lds	r25, 0x00B8
 3d0:	98 13       	cpse	r25, r24
 3d2:	08 c0       	rjmp	.+16     	; 0x3e4 <Button0_Task+0x20>
	{
		Count0++;
 3d4:	20 91 b9 00 	lds	r18, 0x00B9
 3d8:	2f 5f       	subi	r18, 0xFF	; 255
 3da:	20 93 b9 00 	sts	0x00B9, r18
	else
	{
		Count0 = 0;
	}
	
	if (Count0 > 2)
 3de:	23 30       	cpi	r18, 0x03	; 3
 3e0:	20 f4       	brcc	.+8      	; 0x3ea <Button0_Task+0x26>
 3e2:	05 c0       	rjmp	.+10     	; 0x3ee <Button0_Task+0x2a>
	{
		Count0++;
	}
	else
	{
		Count0 = 0;
 3e4:	10 92 b9 00 	sts	0x00B9, r1
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <Button0_Task+0x2a>
	}
	
	if (Count0 > 2)
	{
		Actual_Button0 = New_Button0;
 3ea:	90 93 ba 00 	sts	0x00BA, r25
	}
	
	Old_Button0 = New_Button0;
 3ee:	80 93 b8 00 	sts	0x00B8, r24
 3f2:	08 95       	ret

000003f4 <Button1_Task>:
	
	static uint8 Count1 = 0;
	static uint8 Old_Button1 = 0;
	uint8 New_Button1 = 0;
	
	New_Button1 = Dio_ReadPin(PD,1);
 3f4:	61 e0       	ldi	r22, 0x01	; 1
 3f6:	83 e0       	ldi	r24, 0x03	; 3
 3f8:	0e 94 c3 02 	call	0x586	; 0x586 <Dio_ReadPin>
	
	if (Old_Button1 == New_Button1)
 3fc:	90 91 bb 00 	lds	r25, 0x00BB
 400:	98 13       	cpse	r25, r24
 402:	08 c0       	rjmp	.+16     	; 0x414 <Button1_Task+0x20>
	{
		Count1++;
 404:	20 91 bc 00 	lds	r18, 0x00BC
 408:	2f 5f       	subi	r18, 0xFF	; 255
 40a:	20 93 bc 00 	sts	0x00BC, r18
	else
	{
		Count1 = 0;
	}
	
	if (Count1>2)
 40e:	23 30       	cpi	r18, 0x03	; 3
 410:	20 f4       	brcc	.+8      	; 0x41a <Button1_Task+0x26>
 412:	05 c0       	rjmp	.+10     	; 0x41e <Button1_Task+0x2a>
	{
		Count1++;
	}
	else
	{
		Count1 = 0;
 414:	10 92 bc 00 	sts	0x00BC, r1
 418:	02 c0       	rjmp	.+4      	; 0x41e <Button1_Task+0x2a>
	}
	
	if (Count1>2)
	{
		Actual_Button1 = New_Button1;
 41a:	90 93 bd 00 	sts	0x00BD, r25
	}
	Old_Button1 = New_Button1;
 41e:	80 93 bb 00 	sts	0x00BB, r24
 422:	08 95       	ret

00000424 <Button_Read_actual>:

uint8 Button_Read_actual(Button_Name_t Button_Name)
{
	uint8 Button_Level=0;
	
	switch(Button_Name)
 424:	81 30       	cpi	r24, 0x01	; 1
 426:	39 f0       	breq	.+14     	; 0x436 <Button_Read_actual+0x12>
 428:	18 f0       	brcs	.+6      	; 0x430 <Button_Read_actual+0xc>
 42a:	82 30       	cpi	r24, 0x02	; 2
 42c:	51 f4       	brne	.+20     	; 0x442 <Button_Read_actual+0x1e>
 42e:	06 c0       	rjmp	.+12     	; 0x43c <Button_Read_actual+0x18>
	{
		case BUTTON0 :
		
		Button_Level = Actual_Button0;
 430:	80 91 ba 00 	lds	r24, 0x00BA
		break;
 434:	08 95       	ret
		
		case BUTTON1 :
		
		Button_Level = Actual_Button1;
 436:	80 91 bd 00 	lds	r24, 0x00BD
		break;
 43a:	08 95       	ret
		
		case BUTTON2 :
		
		Button_Level = Actual_Button2;
 43c:	80 91 be 00 	lds	r24, 0x00BE
		break;
 440:	08 95       	ret
}


uint8 Button_Read_actual(Button_Name_t Button_Name)
{
	uint8 Button_Level=0;
 442:	80 e0       	ldi	r24, 0x00	; 0
		
		default:	break;
	}
	
	return Button_Level;
}
 444:	08 95       	ret

00000446 <Buzzer_Handler>:
#include "Dio.h"
#include "Buzzer.h"

void Buzzer_Handler(uint8 level)
{
	if (level==HIGH)
 446:	81 30       	cpi	r24, 0x01	; 1
 448:	31 f4       	brne	.+12     	; 0x456 <Buzzer_Handler+0x10>
	{
		Dio_WritePin(PD,4,HIGH);
 44a:	41 e0       	ldi	r20, 0x01	; 1
 44c:	64 e0       	ldi	r22, 0x04	; 4
 44e:	83 e0       	ldi	r24, 0x03	; 3
 450:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
 454:	08 95       	ret
	}
	else
	{
		Dio_WritePin(PD,4,LOW);
 456:	40 e0       	ldi	r20, 0x00	; 0
 458:	64 e0       	ldi	r22, 0x04	; 4
 45a:	83 e0       	ldi	r24, 0x03	; 3
 45c:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
 460:	08 95       	ret

00000462 <Buzzer_Toggle>:
}

void Buzzer_Toggle(void)
{
	static uint8 F_State=0;
	if (1==F_State)
 462:	80 91 bf 00 	lds	r24, 0x00BF
 466:	81 30       	cpi	r24, 0x01	; 1
 468:	41 f4       	brne	.+16     	; 0x47a <Buzzer_Toggle+0x18>
	{
		Dio_WritePin(PD,4,HIGH);
 46a:	41 e0       	ldi	r20, 0x01	; 1
 46c:	64 e0       	ldi	r22, 0x04	; 4
 46e:	83 e0       	ldi	r24, 0x03	; 3
 470:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
		F_State=0;
 474:	10 92 bf 00 	sts	0x00BF, r1
 478:	08 95       	ret
	}
	else
	{
		Dio_WritePin(PD,4,LOW);
 47a:	40 e0       	ldi	r20, 0x00	; 0
 47c:	64 e0       	ldi	r22, 0x04	; 4
 47e:	83 e0       	ldi	r24, 0x03	; 3
 480:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
		F_State=1;
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	80 93 bf 00 	sts	0x00BF, r24
 48a:	08 95       	ret

0000048c <Dio_WritePin>:
extern const Dio_pin_state_t Pin_state[LAST_PIN];

void  Dio_WritePin (Dio_port_t port_num, uint8 pin_num, uint8 Level)
{

    switch(port_num)
 48c:	81 30       	cpi	r24, 0x01	; 1
 48e:	21 f1       	breq	.+72     	; 0x4d8 <Dio_WritePin+0x4c>
 490:	30 f0       	brcs	.+12     	; 0x49e <Dio_WritePin+0x12>
 492:	82 30       	cpi	r24, 0x02	; 2
 494:	f1 f1       	breq	.+124    	; 0x512 <Dio_WritePin+0x86>
 496:	83 30       	cpi	r24, 0x03	; 3
 498:	09 f0       	breq	.+2      	; 0x49c <Dio_WritePin+0x10>
 49a:	74 c0       	rjmp	.+232    	; 0x584 <Dio_WritePin+0xf8>
 49c:	57 c0       	rjmp	.+174    	; 0x54c <Dio_WritePin+0xc0>
    {
        case PA:
			if ( HIGH == Level)
 49e:	41 30       	cpi	r20, 0x01	; 1
 4a0:	69 f4       	brne	.+26     	; 0x4bc <Dio_WritePin+0x30>
			{
				SET_BIT(PORTA,pin_num);
 4a2:	2b b3       	in	r18, 0x1b	; 27
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	ac 01       	movw	r20, r24
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <Dio_WritePin+0x24>
 4ac:	44 0f       	add	r20, r20
 4ae:	55 1f       	adc	r21, r21
 4b0:	6a 95       	dec	r22
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <Dio_WritePin+0x20>
 4b4:	ba 01       	movw	r22, r20
 4b6:	62 2b       	or	r22, r18
 4b8:	6b bb       	out	0x1b, r22	; 27
 4ba:	08 95       	ret
			}
			else 
			{
				CLEAR_BIT(PORTA,pin_num);
 4bc:	2b b3       	in	r18, 0x1b	; 27
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	ac 01       	movw	r20, r24
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <Dio_WritePin+0x3e>
 4c6:	44 0f       	add	r20, r20
 4c8:	55 1f       	adc	r21, r21
 4ca:	6a 95       	dec	r22
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <Dio_WritePin+0x3a>
 4ce:	ba 01       	movw	r22, r20
 4d0:	60 95       	com	r22
 4d2:	62 23       	and	r22, r18
 4d4:	6b bb       	out	0x1b, r22	; 27
 4d6:	08 95       	ret
			}
        break;
        case PB:
			if ( HIGH == Level)
 4d8:	41 30       	cpi	r20, 0x01	; 1
 4da:	69 f4       	brne	.+26     	; 0x4f6 <Dio_WritePin+0x6a>
			{
				SET_BIT(PORTB,pin_num);
 4dc:	28 b3       	in	r18, 0x18	; 24
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	ac 01       	movw	r20, r24
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <Dio_WritePin+0x5e>
 4e6:	44 0f       	add	r20, r20
 4e8:	55 1f       	adc	r21, r21
 4ea:	6a 95       	dec	r22
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <Dio_WritePin+0x5a>
 4ee:	ba 01       	movw	r22, r20
 4f0:	62 2b       	or	r22, r18
 4f2:	68 bb       	out	0x18, r22	; 24
 4f4:	08 95       	ret
			}
			else 
			{
				CLEAR_BIT(PORTB,pin_num);
 4f6:	28 b3       	in	r18, 0x18	; 24
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	ac 01       	movw	r20, r24
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <Dio_WritePin+0x78>
 500:	44 0f       	add	r20, r20
 502:	55 1f       	adc	r21, r21
 504:	6a 95       	dec	r22
 506:	e2 f7       	brpl	.-8      	; 0x500 <Dio_WritePin+0x74>
 508:	ba 01       	movw	r22, r20
 50a:	60 95       	com	r22
 50c:	62 23       	and	r22, r18
 50e:	68 bb       	out	0x18, r22	; 24
 510:	08 95       	ret
			}        
		break;
        case PC:
			if ( HIGH == Level)
 512:	41 30       	cpi	r20, 0x01	; 1
 514:	69 f4       	brne	.+26     	; 0x530 <Dio_WritePin+0xa4>
			{
				SET_BIT(PORTC,pin_num);
 516:	25 b3       	in	r18, 0x15	; 21
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	ac 01       	movw	r20, r24
 51e:	02 c0       	rjmp	.+4      	; 0x524 <Dio_WritePin+0x98>
 520:	44 0f       	add	r20, r20
 522:	55 1f       	adc	r21, r21
 524:	6a 95       	dec	r22
 526:	e2 f7       	brpl	.-8      	; 0x520 <Dio_WritePin+0x94>
 528:	ba 01       	movw	r22, r20
 52a:	62 2b       	or	r22, r18
 52c:	65 bb       	out	0x15, r22	; 21
 52e:	08 95       	ret
			}
			else 
			{
				CLEAR_BIT(PORTC,pin_num);
 530:	25 b3       	in	r18, 0x15	; 21
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	ac 01       	movw	r20, r24
 538:	02 c0       	rjmp	.+4      	; 0x53e <Dio_WritePin+0xb2>
 53a:	44 0f       	add	r20, r20
 53c:	55 1f       	adc	r21, r21
 53e:	6a 95       	dec	r22
 540:	e2 f7       	brpl	.-8      	; 0x53a <Dio_WritePin+0xae>
 542:	ba 01       	movw	r22, r20
 544:	60 95       	com	r22
 546:	62 23       	and	r22, r18
 548:	65 bb       	out	0x15, r22	; 21
 54a:	08 95       	ret
			}
        break;
        case PD:
			if ( HIGH == Level)
 54c:	41 30       	cpi	r20, 0x01	; 1
 54e:	69 f4       	brne	.+26     	; 0x56a <Dio_WritePin+0xde>
			{
				SET_BIT(PORTD,pin_num);
 550:	22 b3       	in	r18, 0x12	; 18
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	ac 01       	movw	r20, r24
 558:	02 c0       	rjmp	.+4      	; 0x55e <Dio_WritePin+0xd2>
 55a:	44 0f       	add	r20, r20
 55c:	55 1f       	adc	r21, r21
 55e:	6a 95       	dec	r22
 560:	e2 f7       	brpl	.-8      	; 0x55a <Dio_WritePin+0xce>
 562:	ba 01       	movw	r22, r20
 564:	62 2b       	or	r22, r18
 566:	62 bb       	out	0x12, r22	; 18
 568:	08 95       	ret
			}
			else 
			{
				CLEAR_BIT(PORTD,pin_num);
 56a:	22 b3       	in	r18, 0x12	; 18
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	ac 01       	movw	r20, r24
 572:	02 c0       	rjmp	.+4      	; 0x578 <Dio_WritePin+0xec>
 574:	44 0f       	add	r20, r20
 576:	55 1f       	adc	r21, r21
 578:	6a 95       	dec	r22
 57a:	e2 f7       	brpl	.-8      	; 0x574 <Dio_WritePin+0xe8>
 57c:	ba 01       	movw	r22, r20
 57e:	60 95       	com	r22
 580:	62 23       	and	r22, r18
 582:	62 bb       	out	0x12, r22	; 18
 584:	08 95       	ret

00000586 <Dio_ReadPin>:
uint8 Dio_ReadPin  (Dio_port_t port_num, uint8 pin_num)
{

	uint8 pin_Level = LOW;
	
    switch(port_num)
 586:	81 30       	cpi	r24, 0x01	; 1
 588:	81 f0       	breq	.+32     	; 0x5aa <Dio_ReadPin+0x24>
 58a:	28 f0       	brcs	.+10     	; 0x596 <Dio_ReadPin+0x10>
 58c:	82 30       	cpi	r24, 0x02	; 2
 58e:	b9 f0       	breq	.+46     	; 0x5be <Dio_ReadPin+0x38>
 590:	83 30       	cpi	r24, 0x03	; 3
 592:	49 f5       	brne	.+82     	; 0x5e6 <Dio_ReadPin+0x60>
 594:	1e c0       	rjmp	.+60     	; 0x5d2 <Dio_ReadPin+0x4c>
    {
        case PA:
			pin_Level = READ_BIT(PINA,pin_num);
 596:	29 b3       	in	r18, 0x19	; 25
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	c9 01       	movw	r24, r18
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <Dio_ReadPin+0x1c>
 59e:	95 95       	asr	r25
 5a0:	87 95       	ror	r24
 5a2:	6a 95       	dec	r22
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <Dio_ReadPin+0x18>
 5a6:	81 70       	andi	r24, 0x01	; 1
        break;
 5a8:	08 95       	ret
        case PB:
			pin_Level = READ_BIT(PINB,pin_num);
 5aa:	26 b3       	in	r18, 0x16	; 22
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	c9 01       	movw	r24, r18
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <Dio_ReadPin+0x30>
 5b2:	95 95       	asr	r25
 5b4:	87 95       	ror	r24
 5b6:	6a 95       	dec	r22
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <Dio_ReadPin+0x2c>
 5ba:	81 70       	andi	r24, 0x01	; 1
        break;
 5bc:	08 95       	ret
        case PC:
			pin_Level = READ_BIT(PINC,pin_num);
 5be:	23 b3       	in	r18, 0x13	; 19
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	c9 01       	movw	r24, r18
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <Dio_ReadPin+0x44>
 5c6:	95 95       	asr	r25
 5c8:	87 95       	ror	r24
 5ca:	6a 95       	dec	r22
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <Dio_ReadPin+0x40>
 5ce:	81 70       	andi	r24, 0x01	; 1
        break;
 5d0:	08 95       	ret
        case PD:
			pin_Level = READ_BIT(PIND,pin_num);
 5d2:	20 b3       	in	r18, 0x10	; 16
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	c9 01       	movw	r24, r18
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <Dio_ReadPin+0x58>
 5da:	95 95       	asr	r25
 5dc:	87 95       	ror	r24
 5de:	6a 95       	dec	r22
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <Dio_ReadPin+0x54>
 5e2:	81 70       	andi	r24, 0x01	; 1
        break;
 5e4:	08 95       	ret


uint8 Dio_ReadPin  (Dio_port_t port_num, uint8 pin_num)
{

	uint8 pin_Level = LOW;
 5e6:	80 e0       	ldi	r24, 0x00	; 0
        default:
        break;
    }
    
    return pin_Level;
} /* END OF Dio_ReadPin () */
 5e8:	08 95       	ret

000005ea <Dio_Init>:


void Dio_Init (void)
{
 5ea:	20 e6       	ldi	r18, 0x60	; 96
 5ec:	30 e0       	ldi	r19, 0x00	; 0
    
    return pin_Level;
} /* END OF Dio_ReadPin () */


void Dio_Init (void)
 5ee:	80 e8       	ldi	r24, 0x80	; 128
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	f9 01       	movw	r30, r18
				{
					SET_BIT(DDRB,pin);
				}
				else 
				{
					CLEAR_BIT(DDRB,pin);
 5f4:	41 e0       	ldi	r20, 0x01	; 1
 5f6:	50 e0       	ldi	r21, 0x00	; 0
    
    return pin_Level;
} /* END OF Dio_ReadPin () */


void Dio_Init (void)
 5f8:	7e 2f       	mov	r23, r30
 5fa:	72 1b       	sub	r23, r18
    uint8 pin,i;

    for(i=0;i<LAST_PIN;i++)
    {
        port = i / 8;
        pin  = i % 8;
 5fc:	a7 2f       	mov	r26, r23
 5fe:	a7 70       	andi	r26, 0x07	; 7
    Dio_port_t port;
    uint8 pin,i;

    for(i=0;i<LAST_PIN;i++)
    {
        port = i / 8;
 600:	76 95       	lsr	r23
 602:	76 95       	lsr	r23
 604:	76 95       	lsr	r23
        pin  = i % 8;

        switch(port)
 606:	71 30       	cpi	r23, 0x01	; 1
 608:	41 f1       	breq	.+80     	; 0x65a <Dio_Init+0x70>
 60a:	38 f0       	brcs	.+14     	; 0x61a <Dio_Init+0x30>
 60c:	72 30       	cpi	r23, 0x02	; 2
 60e:	09 f4       	brne	.+2      	; 0x612 <Dio_Init+0x28>
 610:	44 c0       	rjmp	.+136    	; 0x69a <Dio_Init+0xb0>
 612:	73 30       	cpi	r23, 0x03	; 3
 614:	09 f0       	breq	.+2      	; 0x618 <Dio_Init+0x2e>
 616:	7e c0       	rjmp	.+252    	; 0x714 <Dio_Init+0x12a>
 618:	5f c0       	rjmp	.+190    	; 0x6d8 <Dio_Init+0xee>
        {
            case PA:
				if (OUTPUT == Pin_state[i])
 61a:	60 81       	ld	r22, Z
 61c:	61 11       	cpse	r22, r1
 61e:	0a c0       	rjmp	.+20     	; 0x634 <Dio_Init+0x4a>
				{
					SET_BIT(DDRA,pin);
 620:	ba b3       	in	r27, 0x1a	; 26
 622:	ba 01       	movw	r22, r20
 624:	02 c0       	rjmp	.+4      	; 0x62a <Dio_Init+0x40>
 626:	66 0f       	add	r22, r22
 628:	77 1f       	adc	r23, r23
 62a:	aa 95       	dec	r26
 62c:	e2 f7       	brpl	.-8      	; 0x626 <Dio_Init+0x3c>
 62e:	6b 2b       	or	r22, r27
 630:	6a bb       	out	0x1a, r22	; 26
 632:	70 c0       	rjmp	.+224    	; 0x714 <Dio_Init+0x12a>
				}
				else 
				{
					CLEAR_BIT(DDRA,pin);
 634:	ba b3       	in	r27, 0x1a	; 26
 636:	ba 01       	movw	r22, r20
 638:	02 c0       	rjmp	.+4      	; 0x63e <Dio_Init+0x54>
 63a:	66 0f       	add	r22, r22
 63c:	77 1f       	adc	r23, r23
 63e:	aa 95       	dec	r26
 640:	e2 f7       	brpl	.-8      	; 0x63a <Dio_Init+0x50>
 642:	a6 2f       	mov	r26, r22
 644:	a0 95       	com	r26
 646:	ab 23       	and	r26, r27
 648:	aa bb       	out	0x1a, r26	; 26
					if (INPULLUP == Pin_state[i])
 64a:	a0 81       	ld	r26, Z
 64c:	a1 30       	cpi	r26, 0x01	; 1
 64e:	09 f0       	breq	.+2      	; 0x652 <Dio_Init+0x68>
 650:	61 c0       	rjmp	.+194    	; 0x714 <Dio_Init+0x12a>
					{
						SET_BIT(PORTA,pin);
 652:	7b b3       	in	r23, 0x1b	; 27
 654:	67 2b       	or	r22, r23
 656:	6b bb       	out	0x1b, r22	; 27
 658:	5d c0       	rjmp	.+186    	; 0x714 <Dio_Init+0x12a>
					}
				}
            break;
            case PB:
				if (OUTPUT == Pin_state[i])
 65a:	60 81       	ld	r22, Z
 65c:	61 11       	cpse	r22, r1
 65e:	0a c0       	rjmp	.+20     	; 0x674 <Dio_Init+0x8a>
				{
					SET_BIT(DDRB,pin);
 660:	b7 b3       	in	r27, 0x17	; 23
 662:	ba 01       	movw	r22, r20
 664:	02 c0       	rjmp	.+4      	; 0x66a <Dio_Init+0x80>
 666:	66 0f       	add	r22, r22
 668:	77 1f       	adc	r23, r23
 66a:	aa 95       	dec	r26
 66c:	e2 f7       	brpl	.-8      	; 0x666 <Dio_Init+0x7c>
 66e:	6b 2b       	or	r22, r27
 670:	67 bb       	out	0x17, r22	; 23
 672:	50 c0       	rjmp	.+160    	; 0x714 <Dio_Init+0x12a>
				}
				else 
				{
					CLEAR_BIT(DDRB,pin);
 674:	b7 b3       	in	r27, 0x17	; 23
 676:	ba 01       	movw	r22, r20
 678:	02 c0       	rjmp	.+4      	; 0x67e <Dio_Init+0x94>
 67a:	66 0f       	add	r22, r22
 67c:	77 1f       	adc	r23, r23
 67e:	aa 95       	dec	r26
 680:	e2 f7       	brpl	.-8      	; 0x67a <Dio_Init+0x90>
 682:	a6 2f       	mov	r26, r22
 684:	a0 95       	com	r26
 686:	ab 23       	and	r26, r27
 688:	a7 bb       	out	0x17, r26	; 23
					if (INPULLUP == Pin_state[i])
 68a:	a0 81       	ld	r26, Z
 68c:	a1 30       	cpi	r26, 0x01	; 1
 68e:	09 f0       	breq	.+2      	; 0x692 <Dio_Init+0xa8>
 690:	41 c0       	rjmp	.+130    	; 0x714 <Dio_Init+0x12a>
					{
						SET_BIT(PORTB,pin);
 692:	78 b3       	in	r23, 0x18	; 24
 694:	67 2b       	or	r22, r23
 696:	68 bb       	out	0x18, r22	; 24
 698:	3d c0       	rjmp	.+122    	; 0x714 <Dio_Init+0x12a>
					}
				}
            break;
            case PC:
				if (OUTPUT == Pin_state[i])
 69a:	60 81       	ld	r22, Z
 69c:	61 11       	cpse	r22, r1
 69e:	0a c0       	rjmp	.+20     	; 0x6b4 <Dio_Init+0xca>
				{
					SET_BIT(DDRC,pin);
 6a0:	b4 b3       	in	r27, 0x14	; 20
 6a2:	ba 01       	movw	r22, r20
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <Dio_Init+0xc0>
 6a6:	66 0f       	add	r22, r22
 6a8:	77 1f       	adc	r23, r23
 6aa:	aa 95       	dec	r26
 6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <Dio_Init+0xbc>
 6ae:	6b 2b       	or	r22, r27
 6b0:	64 bb       	out	0x14, r22	; 20
 6b2:	30 c0       	rjmp	.+96     	; 0x714 <Dio_Init+0x12a>
				}
				else 
				{
					CLEAR_BIT(DDRC,pin);
 6b4:	b4 b3       	in	r27, 0x14	; 20
 6b6:	ba 01       	movw	r22, r20
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <Dio_Init+0xd4>
 6ba:	66 0f       	add	r22, r22
 6bc:	77 1f       	adc	r23, r23
 6be:	aa 95       	dec	r26
 6c0:	e2 f7       	brpl	.-8      	; 0x6ba <Dio_Init+0xd0>
 6c2:	a6 2f       	mov	r26, r22
 6c4:	a0 95       	com	r26
 6c6:	ab 23       	and	r26, r27
 6c8:	a4 bb       	out	0x14, r26	; 20
					if (INPULLUP == Pin_state[i])
 6ca:	a0 81       	ld	r26, Z
 6cc:	a1 30       	cpi	r26, 0x01	; 1
 6ce:	11 f5       	brne	.+68     	; 0x714 <Dio_Init+0x12a>
					{
						SET_BIT(PORTC,pin);
 6d0:	75 b3       	in	r23, 0x15	; 21
 6d2:	67 2b       	or	r22, r23
 6d4:	65 bb       	out	0x15, r22	; 21
 6d6:	1e c0       	rjmp	.+60     	; 0x714 <Dio_Init+0x12a>
					}
				}
            break;
            case PD:
				if (OUTPUT == Pin_state[i])
 6d8:	60 81       	ld	r22, Z
 6da:	61 11       	cpse	r22, r1
 6dc:	0a c0       	rjmp	.+20     	; 0x6f2 <Dio_Init+0x108>
				{
					SET_BIT(DDRD,pin);
 6de:	b1 b3       	in	r27, 0x11	; 17
 6e0:	ba 01       	movw	r22, r20
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <Dio_Init+0xfe>
 6e4:	66 0f       	add	r22, r22
 6e6:	77 1f       	adc	r23, r23
 6e8:	aa 95       	dec	r26
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <Dio_Init+0xfa>
 6ec:	6b 2b       	or	r22, r27
 6ee:	61 bb       	out	0x11, r22	; 17
 6f0:	11 c0       	rjmp	.+34     	; 0x714 <Dio_Init+0x12a>
				}
				else 
				{
					CLEAR_BIT(DDRD,pin);
 6f2:	b1 b3       	in	r27, 0x11	; 17
 6f4:	ba 01       	movw	r22, r20
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <Dio_Init+0x112>
 6f8:	66 0f       	add	r22, r22
 6fa:	77 1f       	adc	r23, r23
 6fc:	aa 95       	dec	r26
 6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <Dio_Init+0x10e>
 700:	a6 2f       	mov	r26, r22
 702:	a0 95       	com	r26
 704:	ab 23       	and	r26, r27
 706:	a1 bb       	out	0x11, r26	; 17
					if (INPULLUP == Pin_state[i])
 708:	a0 81       	ld	r26, Z
 70a:	a1 30       	cpi	r26, 0x01	; 1
 70c:	19 f4       	brne	.+6      	; 0x714 <Dio_Init+0x12a>
					{
						SET_BIT(PORTD,pin);
 70e:	72 b3       	in	r23, 0x12	; 18
 710:	67 2b       	or	r22, r23
 712:	62 bb       	out	0x12, r22	; 18
 714:	31 96       	adiw	r30, 0x01	; 1
void Dio_Init (void)
{
    Dio_port_t port;
    uint8 pin,i;

    for(i=0;i<LAST_PIN;i++)
 716:	e8 17       	cp	r30, r24
 718:	f9 07       	cpc	r31, r25
 71a:	09 f0       	breq	.+2      	; 0x71e <Dio_Init+0x134>
 71c:	6d cf       	rjmp	.-294    	; 0x5f8 <Dio_Init+0xe>
			default:
            
            break;
        }
    }
} /* END OF Dio_Init () */
 71e:	08 95       	ret

00000720 <Elec_Valve>:
#include "Electric_Valve.h"


void Elec_Valve(uint8 level)
{
	if (HIGH==level)
 720:	81 30       	cpi	r24, 0x01	; 1
 722:	19 f4       	brne	.+6      	; 0x72a <Elec_Valve+0xa>
	{
		Relay_Handler(HIGH);
 724:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <Relay_Handler>
 728:	08 95       	ret
	} 
	else
	{
		Relay_Handler(LOW);
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <Relay_Handler>
 730:	08 95       	ret

00000732 <Led_Handler>:
#include "Dio.h"
#include "Led.h"

void Led_Handler(Led_Name_t Led , uint8 Level)
{
	switch(Led)
 732:	81 30       	cpi	r24, 0x01	; 1
 734:	51 f0       	breq	.+20     	; 0x74a <Led_Handler+0x18>
 736:	18 f0       	brcs	.+6      	; 0x73e <Led_Handler+0xc>
 738:	82 30       	cpi	r24, 0x02	; 2
 73a:	91 f4       	brne	.+36     	; 0x760 <Led_Handler+0x2e>
 73c:	0c c0       	rjmp	.+24     	; 0x756 <Led_Handler+0x24>
	{
		case LED0:
		Dio_WritePin(PD,7,Level);
 73e:	46 2f       	mov	r20, r22
 740:	67 e0       	ldi	r22, 0x07	; 7
 742:	83 e0       	ldi	r24, 0x03	; 3
 744:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
		break;
 748:	08 95       	ret
		
		case LED1:
		Dio_WritePin(PD,6,Level);
 74a:	46 2f       	mov	r20, r22
 74c:	66 e0       	ldi	r22, 0x06	; 6
 74e:	83 e0       	ldi	r24, 0x03	; 3
 750:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
		break;
 754:	08 95       	ret
		
		case LED2:
		Dio_WritePin(PD,5,Level);
 756:	46 2f       	mov	r20, r22
 758:	65 e0       	ldi	r22, 0x05	; 5
 75a:	83 e0       	ldi	r24, 0x03	; 3
 75c:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
 760:	08 95       	ret

00000762 <Led1_Toggle>:


void Led1_Toggle(void)
{
	static uint8 F_State1=0;
	if (1==F_State1)
 762:	80 91 c0 00 	lds	r24, 0x00C0
 766:	81 30       	cpi	r24, 0x01	; 1
 768:	41 f4       	brne	.+16     	; 0x77a <Led1_Toggle+0x18>
	{
		Dio_WritePin(PD,7,HIGH);
 76a:	41 e0       	ldi	r20, 0x01	; 1
 76c:	67 e0       	ldi	r22, 0x07	; 7
 76e:	83 e0       	ldi	r24, 0x03	; 3
 770:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
		F_State1=0;
 774:	10 92 c0 00 	sts	0x00C0, r1
 778:	08 95       	ret
	}
	else
	{
		Dio_WritePin(PD,7,LOW);
 77a:	40 e0       	ldi	r20, 0x00	; 0
 77c:	67 e0       	ldi	r22, 0x07	; 7
 77e:	83 e0       	ldi	r24, 0x03	; 3
 780:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
		F_State1=1;
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	80 93 c0 00 	sts	0x00C0, r24
 78a:	08 95       	ret

0000078c <Led2_Toggle>:
}

void Led2_Toggle(void)
{
	static uint8 F_State2=0;
	if (1==F_State2)
 78c:	80 91 c1 00 	lds	r24, 0x00C1
 790:	81 30       	cpi	r24, 0x01	; 1
 792:	41 f4       	brne	.+16     	; 0x7a4 <Led2_Toggle+0x18>
	{
		Dio_WritePin(PD,6,HIGH);
 794:	41 e0       	ldi	r20, 0x01	; 1
 796:	66 e0       	ldi	r22, 0x06	; 6
 798:	83 e0       	ldi	r24, 0x03	; 3
 79a:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
		F_State2=0;
 79e:	10 92 c1 00 	sts	0x00C1, r1
 7a2:	08 95       	ret
	}
	else
	{
		Dio_WritePin(PD,6,LOW);
 7a4:	40 e0       	ldi	r20, 0x00	; 0
 7a6:	66 e0       	ldi	r22, 0x06	; 6
 7a8:	83 e0       	ldi	r24, 0x03	; 3
 7aa:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
		F_State2=1;
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	80 93 c1 00 	sts	0x00C1, r24
 7b4:	08 95       	ret

000007b6 <Led3_Toggle>:


void Led3_Toggle(void)
{
	static uint8 F_State3=0;
	if (1==F_State3)
 7b6:	80 91 c2 00 	lds	r24, 0x00C2
 7ba:	81 30       	cpi	r24, 0x01	; 1
 7bc:	41 f4       	brne	.+16     	; 0x7ce <Led3_Toggle+0x18>
	{
		Dio_WritePin(PD,5,HIGH);
 7be:	41 e0       	ldi	r20, 0x01	; 1
 7c0:	65 e0       	ldi	r22, 0x05	; 5
 7c2:	83 e0       	ldi	r24, 0x03	; 3
 7c4:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
		F_State3=0;
 7c8:	10 92 c2 00 	sts	0x00C2, r1
 7cc:	08 95       	ret
	}
	else
	{
		Dio_WritePin(PD,5,LOW);
 7ce:	40 e0       	ldi	r20, 0x00	; 0
 7d0:	65 e0       	ldi	r22, 0x05	; 5
 7d2:	83 e0       	ldi	r24, 0x03	; 3
 7d4:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
		F_State3=1;
 7d8:	81 e0       	ldi	r24, 0x01	; 1
 7da:	80 93 c2 00 	sts	0x00C2, r24
 7de:	08 95       	ret

000007e0 <Relay_Handler>:
#include "Dio.h"
#include "relay.h"

void Relay_Handler(uint8 level)
{
	if (level==HIGH)
 7e0:	81 30       	cpi	r24, 0x01	; 1
 7e2:	31 f4       	brne	.+12     	; 0x7f0 <Relay_Handler+0x10>
	{
		Dio_WritePin(PD,3,HIGH);
 7e4:	41 e0       	ldi	r20, 0x01	; 1
 7e6:	63 e0       	ldi	r22, 0x03	; 3
 7e8:	83 e0       	ldi	r24, 0x03	; 3
 7ea:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
 7ee:	08 95       	ret
	}
	else
	{
		Dio_WritePin(PD,3,LOW);
 7f0:	40 e0       	ldi	r20, 0x00	; 0
 7f2:	63 e0       	ldi	r22, 0x03	; 3
 7f4:	83 e0       	ldi	r24, 0x03	; 3
 7f6:	0e 94 46 02 	call	0x48c	; 0x48c <Dio_WritePin>
 7fa:	08 95       	ret

000007fc <Alarm_Init>:
	}
}

void Alarm_Init(void)
{
	if (Alarm_Flag == 1 || Button_Flag == 1)
 7fc:	80 91 c3 00 	lds	r24, 0x00C3
 800:	81 30       	cpi	r24, 0x01	; 1
 802:	21 f0       	breq	.+8      	; 0x80c <Alarm_Init+0x10>
 804:	80 91 c4 00 	lds	r24, 0x00C4
 808:	81 30       	cpi	r24, 0x01	; 1
 80a:	79 f4       	brne	.+30     	; 0x82a <Alarm_Init+0x2e>
	{
		Elec_Valve(HIGH);
 80c:	81 e0       	ldi	r24, 0x01	; 1
 80e:	0e 94 90 03 	call	0x720	; 0x720 <Elec_Valve>
		Led1_Toggle();
 812:	0e 94 b1 03 	call	0x762	; 0x762 <Led1_Toggle>
		Led2_Toggle();
 816:	0e 94 c6 03 	call	0x78c	; 0x78c <Led2_Toggle>
		Led3_Toggle();
 81a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <Led3_Toggle>
		Buzzer_Toggle();
 81e:	0e 94 31 02 	call	0x462	; 0x462 <Buzzer_Toggle>
		bluetooth('w');
 822:	87 e7       	ldi	r24, 0x77	; 119
 824:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <bluetooth>
}

void Alarm_Init(void)
{
	if (Alarm_Flag == 1 || Button_Flag == 1)
	{
 828:	08 95       	ret
		Buzzer_Toggle();
		bluetooth('w');
	}
	else
	{
		Elec_Valve(LOW);
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	0e 94 90 03 	call	0x720	; 0x720 <Elec_Valve>
		Led_Handler(LED0, LOW);
 830:	60 e0       	ldi	r22, 0x00	; 0
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	0e 94 99 03 	call	0x732	; 0x732 <Led_Handler>
		Led_Handler(LED1, LOW);
 838:	60 e0       	ldi	r22, 0x00	; 0
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	0e 94 99 03 	call	0x732	; 0x732 <Led_Handler>
		Led_Handler(LED2, LOW);
 840:	60 e0       	ldi	r22, 0x00	; 0
 842:	82 e0       	ldi	r24, 0x02	; 2
 844:	0e 94 99 03 	call	0x732	; 0x732 <Led_Handler>
		Buzzer_Handler(LOW);
 848:	80 e0       	ldi	r24, 0x00	; 0
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	0e 94 23 02 	call	0x446	; 0x446 <Buzzer_Handler>
 850:	08 95       	ret

00000852 <Fire_Condition>:
	}
}

void Fire_Condition(void)
{
	if ((temp >= 35) || (smoke >= 512))
 852:	80 91 d1 00 	lds	r24, 0x00D1
 856:	83 32       	cpi	r24, 0x23	; 35
 858:	3c f4       	brge	.+14     	; 0x868 <__stack+0x9>
 85a:	80 91 cf 00 	lds	r24, 0x00CF
 85e:	90 91 d0 00 	lds	r25, 0x00D0
 862:	81 15       	cp	r24, r1
 864:	92 40       	sbci	r25, 0x02	; 2
 866:	20 f0       	brcs	.+8      	; 0x870 <__stack+0x11>
	{
		Alarm_Flag = 1;
 868:	81 e0       	ldi	r24, 0x01	; 1
 86a:	80 93 c3 00 	sts	0x00C3, r24
 86e:	02 c0       	rjmp	.+4      	; 0x874 <__stack+0x15>
	}
	else
	{
		Alarm_Flag = 0;
 870:	10 92 c3 00 	sts	0x00C3, r1
	}
	
	if (Button_Read_actual(BUTTON0) == 1)
 874:	80 e0       	ldi	r24, 0x00	; 0
 876:	0e 94 12 02 	call	0x424	; 0x424 <Button_Read_actual>
 87a:	81 30       	cpi	r24, 0x01	; 1
 87c:	19 f4       	brne	.+6      	; 0x884 <__stack+0x25>
	{
		Button_Flag = 1;
 87e:	80 93 c4 00 	sts	0x00C4, r24
 882:	08 95       	ret
	}
	else if (Button_Read_actual(BUTTON1) == 1)
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	0e 94 12 02 	call	0x424	; 0x424 <Button_Read_actual>
 88a:	81 30       	cpi	r24, 0x01	; 1
 88c:	11 f4       	brne	.+4      	; 0x892 <__stack+0x33>
	{
		Button_Flag = 0;
 88e:	10 92 c4 00 	sts	0x00C4, r1
 892:	08 95       	ret

00000894 <LCD_Display>:


uint8 Button_Flag = 0, Alarm_Flag = 0;

void LCD_Display(void)
{
 894:	cf 93       	push	r28
	if (Alarm_Flag == 1 || Button_Flag == 1)
 896:	80 91 c3 00 	lds	r24, 0x00C3
 89a:	81 30       	cpi	r24, 0x01	; 1
 89c:	21 f0       	breq	.+8      	; 0x8a6 <LCD_Display+0x12>
 89e:	80 91 c4 00 	lds	r24, 0x00C4
 8a2:	81 30       	cpi	r24, 0x01	; 1
 8a4:	39 f4       	brne	.+14     	; 0x8b4 <LCD_Display+0x20>
	{
		Lcd_Clear();
 8a6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Lcd_Clear>
		Lcd_Write_String("FIRE ALARM !!");
 8aa:	80 e8       	ldi	r24, 0x80	; 128
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Lcd_Write_String>
 8b2:	2a c0       	rjmp	.+84     	; 0x908 <LCD_Display+0x74>
	}
	else
	{
		sint8 Temp_LCD = temp;
 8b4:	c0 91 d1 00 	lds	r28, 0x00D1
		
		Lcd_Clear();
 8b8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Lcd_Clear>
		Lcd_Write_String("temp:");
 8bc:	8e e8       	ldi	r24, 0x8E	; 142
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Lcd_Write_String>
		
		if (Temp_LCD < 0)
 8c4:	cc 23       	and	r28, r28
 8c6:	24 f4       	brge	.+8      	; 0x8d0 <LCD_Display+0x3c>
		{
			Lcd_Write_Char('-');
 8c8:	8d e2       	ldi	r24, 0x2D	; 45
 8ca:	0e 94 2c 01 	call	0x258	; 0x258 <Lcd_Write_Char>
			Temp_LCD *= -1;
 8ce:	c1 95       	neg	r28
		}
		
		NUM_to_ASCII(Temp_LCD);
 8d0:	8c 2f       	mov	r24, r28
 8d2:	99 27       	eor	r25, r25
 8d4:	87 fd       	sbrc	r24, 7
 8d6:	90 95       	com	r25
 8d8:	0e 94 7f 01 	call	0x2fe	; 0x2fe <NUM_to_ASCII>
		Lcd_Write_String(ASCII);
 8dc:	8a ec       	ldi	r24, 0xCA	; 202
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Lcd_Write_String>
		
		Lcd_Set_Cursor(2, 0);
 8e4:	60 e0       	ldi	r22, 0x00	; 0
 8e6:	82 e0       	ldi	r24, 0x02	; 2
 8e8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Lcd_Set_Cursor>
		
		NUM_to_ASCII(smoke);
 8ec:	80 91 cf 00 	lds	r24, 0x00CF
 8f0:	90 91 d0 00 	lds	r25, 0x00D0
 8f4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <NUM_to_ASCII>
		Lcd_Write_String("smoke:");
 8f8:	84 e9       	ldi	r24, 0x94	; 148
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Lcd_Write_String>
		Lcd_Write_String(ASCII);
 900:	8a ec       	ldi	r24, 0xCA	; 202
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Lcd_Write_String>
	}
}
 908:	cf 91       	pop	r28
 90a:	08 95       	ret

0000090c <Start_Os>:
	{200, Alarm_Init}
	
};

void Start_Os(void)
{
 90c:	0f 2e       	mov	r0, r31
 90e:	fb e9       	ldi	r31, 0x9B	; 155
 910:	ef 2e       	mov	r14, r31
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	ff 2e       	mov	r15, r31
 916:	f0 2d       	mov	r31, r0
	{200, Fire_Condition},
	{200, Alarm_Init}
	
};

void Start_Os(void)
 918:	07 eb       	ldi	r16, 0xB7	; 183
 91a:	10 e0       	ldi	r17, 0x00	; 0
{
	uint8 i=0;
	uint32 tmp = 0;
	while(1)
	{
		if (1==Timer_Flag)
 91c:	80 91 c9 00 	lds	r24, 0x00C9
 920:	81 30       	cpi	r24, 0x01	; 1
 922:	e1 f7       	brne	.-8      	; 0x91c <Start_Os+0x10>
		{
			tmp = Timer_Counter;
 924:	80 90 c5 00 	lds	r8, 0x00C5
 928:	90 90 c6 00 	lds	r9, 0x00C6
 92c:	a0 90 c7 00 	lds	r10, 0x00C7
 930:	b0 90 c8 00 	lds	r11, 0x00C8
 934:	e7 01       	movw	r28, r14
			for (i=0;i<TASK_NUM;i++)
			{
				if (0== (tmp % Os_Cfg[i].Periodity))
 936:	28 81       	ld	r18, Y
 938:	39 81       	ldd	r19, Y+1	; 0x01
 93a:	40 e0       	ldi	r20, 0x00	; 0
 93c:	50 e0       	ldi	r21, 0x00	; 0
 93e:	c5 01       	movw	r24, r10
 940:	b4 01       	movw	r22, r8
 942:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__udivmodsi4>
 946:	67 2b       	or	r22, r23
 948:	68 2b       	or	r22, r24
 94a:	69 2b       	or	r22, r25
 94c:	19 f4       	brne	.+6      	; 0x954 <Start_Os+0x48>
				{
					Os_Cfg[i].ptr_f();
 94e:	ea 81       	ldd	r30, Y+2	; 0x02
 950:	fb 81       	ldd	r31, Y+3	; 0x03
 952:	09 95       	icall
				}
				Timer_Flag=0;
 954:	10 92 c9 00 	sts	0x00C9, r1
 958:	24 96       	adiw	r28, 0x04	; 4
	while(1)
	{
		if (1==Timer_Flag)
		{
			tmp = Timer_Counter;
			for (i=0;i<TASK_NUM;i++)
 95a:	c0 17       	cp	r28, r16
 95c:	d1 07       	cpc	r29, r17
 95e:	59 f7       	brne	.-42     	; 0x936 <Start_Os+0x2a>
 960:	dd cf       	rjmp	.-70     	; 0x91c <Start_Os+0x10>

00000962 <Smoke_Sensor>:

uint16 smoke;

void Smoke_Sensor(void)
{
	smoke = ADC_Conversion(ADC0);
 962:	80 e0       	ldi	r24, 0x00	; 0
 964:	0e 94 4e 00 	call	0x9c	; 0x9c <ADC_Conversion>
 968:	90 93 d0 00 	sts	0x00D0, r25
 96c:	80 93 cf 00 	sts	0x00CF, r24
 970:	08 95       	ret

00000972 <Temp_Sensor>:

sint8 temp;

void Temp_Sensor(void)
{
	temp = ((ADC_Conversion(ADC1)/12.89*1000) - 40000)/1000;
 972:	81 e0       	ldi	r24, 0x01	; 1
 974:	0e 94 4e 00 	call	0x9c	; 0x9c <ADC_Conversion>
 978:	bc 01       	movw	r22, r24
 97a:	80 e0       	ldi	r24, 0x00	; 0
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__floatunsisf>
 982:	21 e7       	ldi	r18, 0x71	; 113
 984:	3d e3       	ldi	r19, 0x3D	; 61
 986:	4e e4       	ldi	r20, 0x4E	; 78
 988:	51 e4       	ldi	r21, 0x41	; 65
 98a:	0e 94 94 05 	call	0xb28	; 0xb28 <__divsf3>
 98e:	20 e0       	ldi	r18, 0x00	; 0
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	4a e7       	ldi	r20, 0x7A	; 122
 994:	54 e4       	ldi	r21, 0x44	; 68
 996:	0e 94 bb 06 	call	0xd76	; 0xd76 <__mulsf3>
 99a:	20 e0       	ldi	r18, 0x00	; 0
 99c:	30 e4       	ldi	r19, 0x40	; 64
 99e:	4c e1       	ldi	r20, 0x1C	; 28
 9a0:	57 e4       	ldi	r21, 0x47	; 71
 9a2:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__subsf3>
 9a6:	20 e0       	ldi	r18, 0x00	; 0
 9a8:	30 e0       	ldi	r19, 0x00	; 0
 9aa:	4a e7       	ldi	r20, 0x7A	; 122
 9ac:	54 e4       	ldi	r21, 0x44	; 68
 9ae:	0e 94 94 05 	call	0xb28	; 0xb28 <__divsf3>
 9b2:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__fixsfsi>
 9b6:	60 93 d1 00 	sts	0x00D1, r22
 9ba:	08 95       	ret

000009bc <Timer_Init>:
volatile uint8 Timer_Flag=0;
volatile uint32 Timer_Counter=0;

void Timer_Init(void)
{
	TCCR1B=(1<<WGM12)|(1<<CS10);
 9bc:	89 e0       	ldi	r24, 0x09	; 9
 9be:	8e bd       	out	0x2e, r24	; 46
	OCR1A=11999;
 9c0:	8f ed       	ldi	r24, 0xDF	; 223
 9c2:	9e e2       	ldi	r25, 0x2E	; 46
 9c4:	9b bd       	out	0x2b, r25	; 43
 9c6:	8a bd       	out	0x2a, r24	; 42
	TIMSK=(1<<OCIE1A);
 9c8:	80 e1       	ldi	r24, 0x10	; 16
 9ca:	89 bf       	out	0x39, r24	; 57
	sei();
 9cc:	78 94       	sei
 9ce:	08 95       	ret

000009d0 <__vector_7>:
}
	
ISR(TIMER1_COMPA_vect)
	{
 9d0:	1f 92       	push	r1
 9d2:	0f 92       	push	r0
 9d4:	0f b6       	in	r0, 0x3f	; 63
 9d6:	0f 92       	push	r0
 9d8:	11 24       	eor	r1, r1
 9da:	8f 93       	push	r24
 9dc:	9f 93       	push	r25
 9de:	af 93       	push	r26
 9e0:	bf 93       	push	r27
		Timer_Counter++;
 9e2:	80 91 c5 00 	lds	r24, 0x00C5
 9e6:	90 91 c6 00 	lds	r25, 0x00C6
 9ea:	a0 91 c7 00 	lds	r26, 0x00C7
 9ee:	b0 91 c8 00 	lds	r27, 0x00C8
 9f2:	01 96       	adiw	r24, 0x01	; 1
 9f4:	a1 1d       	adc	r26, r1
 9f6:	b1 1d       	adc	r27, r1
 9f8:	80 93 c5 00 	sts	0x00C5, r24
 9fc:	90 93 c6 00 	sts	0x00C6, r25
 a00:	a0 93 c7 00 	sts	0x00C7, r26
 a04:	b0 93 c8 00 	sts	0x00C8, r27
		Timer_Flag=1;
 a08:	81 e0       	ldi	r24, 0x01	; 1
 a0a:	80 93 c9 00 	sts	0x00C9, r24
		
		
	}
 a0e:	bf 91       	pop	r27
 a10:	af 91       	pop	r26
 a12:	9f 91       	pop	r25
 a14:	8f 91       	pop	r24
 a16:	0f 90       	pop	r0
 a18:	0f be       	out	0x3f, r0	; 63
 a1a:	0f 90       	pop	r0
 a1c:	1f 90       	pop	r1
 a1e:	18 95       	reti

00000a20 <UART_Init>:
#include "UART.h"
#include <avr/io.h>

void UART_Init(void)
{
	UBRRH=(77>>8);
 a20:	10 bc       	out	0x20, r1	; 32
	UBRRL=77;
 a22:	8d e4       	ldi	r24, 0x4D	; 77
 a24:	89 b9       	out	0x09, r24	; 9
	UCSRB|=(1<<RXEN)|(1<<TXEN);
 a26:	8a b1       	in	r24, 0x0a	; 10
 a28:	88 61       	ori	r24, 0x18	; 24
 a2a:	8a b9       	out	0x0a, r24	; 10
	UCSRC|=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
 a2c:	80 b5       	in	r24, 0x20	; 32
 a2e:	86 68       	ori	r24, 0x86	; 134
 a30:	80 bd       	out	0x20, r24	; 32
 a32:	08 95       	ret

00000a34 <UART_Send_data>:
	
}

void UART_Send_data(uint8 data)
{
	 while (!( UCSRA & (1<<UDRE)));                
 a34:	5d 9b       	sbis	0x0b, 5	; 11
 a36:	fe cf       	rjmp	.-4      	; 0xa34 <UART_Send_data>
	 UDR = data;
 a38:	8c b9       	out	0x0c, r24	; 12
 a3a:	08 95       	ret

00000a3c <main>:
#include "Amit_LCD.h"
#include "UART.h"

int main(void)
{
	Dio_Init();
 a3c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <Dio_Init>
	Timer_Init();
 a40:	0e 94 de 04 	call	0x9bc	; 0x9bc <Timer_Init>
	ADC_Init();
 a44:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
	Lcd_Init();
 a48:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Lcd_Init>
	Lcd_Clear();
 a4c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Lcd_Clear>
	UART_Init();
 a50:	0e 94 10 05 	call	0xa20	; 0xa20 <UART_Init>
	Start_Os();
 a54:	0e 94 86 04 	call	0x90c	; 0x90c <Start_Os>
 a58:	80 e0       	ldi	r24, 0x00	; 0
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	08 95       	ret

00000a5e <__subsf3>:
 a5e:	50 58       	subi	r21, 0x80	; 128

00000a60 <__addsf3>:
 a60:	bb 27       	eor	r27, r27
 a62:	aa 27       	eor	r26, r26
 a64:	0e d0       	rcall	.+28     	; 0xa82 <__addsf3x>
 a66:	4d c1       	rjmp	.+666    	; 0xd02 <__fp_round>
 a68:	3e d1       	rcall	.+636    	; 0xce6 <__fp_pscA>
 a6a:	30 f0       	brcs	.+12     	; 0xa78 <__addsf3+0x18>
 a6c:	43 d1       	rcall	.+646    	; 0xcf4 <__fp_pscB>
 a6e:	20 f0       	brcs	.+8      	; 0xa78 <__addsf3+0x18>
 a70:	31 f4       	brne	.+12     	; 0xa7e <__addsf3+0x1e>
 a72:	9f 3f       	cpi	r25, 0xFF	; 255
 a74:	11 f4       	brne	.+4      	; 0xa7a <__addsf3+0x1a>
 a76:	1e f4       	brtc	.+6      	; 0xa7e <__addsf3+0x1e>
 a78:	33 c1       	rjmp	.+614    	; 0xce0 <__fp_nan>
 a7a:	0e f4       	brtc	.+2      	; 0xa7e <__addsf3+0x1e>
 a7c:	e0 95       	com	r30
 a7e:	e7 fb       	bst	r30, 7
 a80:	29 c1       	rjmp	.+594    	; 0xcd4 <__fp_inf>

00000a82 <__addsf3x>:
 a82:	e9 2f       	mov	r30, r25
 a84:	4f d1       	rcall	.+670    	; 0xd24 <__fp_split3>
 a86:	80 f3       	brcs	.-32     	; 0xa68 <__addsf3+0x8>
 a88:	ba 17       	cp	r27, r26
 a8a:	62 07       	cpc	r22, r18
 a8c:	73 07       	cpc	r23, r19
 a8e:	84 07       	cpc	r24, r20
 a90:	95 07       	cpc	r25, r21
 a92:	18 f0       	brcs	.+6      	; 0xa9a <__addsf3x+0x18>
 a94:	71 f4       	brne	.+28     	; 0xab2 <__addsf3x+0x30>
 a96:	9e f5       	brtc	.+102    	; 0xafe <__addsf3x+0x7c>
 a98:	67 c1       	rjmp	.+718    	; 0xd68 <__fp_zero>
 a9a:	0e f4       	brtc	.+2      	; 0xa9e <__addsf3x+0x1c>
 a9c:	e0 95       	com	r30
 a9e:	0b 2e       	mov	r0, r27
 aa0:	ba 2f       	mov	r27, r26
 aa2:	a0 2d       	mov	r26, r0
 aa4:	0b 01       	movw	r0, r22
 aa6:	b9 01       	movw	r22, r18
 aa8:	90 01       	movw	r18, r0
 aaa:	0c 01       	movw	r0, r24
 aac:	ca 01       	movw	r24, r20
 aae:	a0 01       	movw	r20, r0
 ab0:	11 24       	eor	r1, r1
 ab2:	ff 27       	eor	r31, r31
 ab4:	59 1b       	sub	r21, r25
 ab6:	99 f0       	breq	.+38     	; 0xade <__addsf3x+0x5c>
 ab8:	59 3f       	cpi	r21, 0xF9	; 249
 aba:	50 f4       	brcc	.+20     	; 0xad0 <__addsf3x+0x4e>
 abc:	50 3e       	cpi	r21, 0xE0	; 224
 abe:	68 f1       	brcs	.+90     	; 0xb1a <__addsf3x+0x98>
 ac0:	1a 16       	cp	r1, r26
 ac2:	f0 40       	sbci	r31, 0x00	; 0
 ac4:	a2 2f       	mov	r26, r18
 ac6:	23 2f       	mov	r18, r19
 ac8:	34 2f       	mov	r19, r20
 aca:	44 27       	eor	r20, r20
 acc:	58 5f       	subi	r21, 0xF8	; 248
 ace:	f3 cf       	rjmp	.-26     	; 0xab6 <__addsf3x+0x34>
 ad0:	46 95       	lsr	r20
 ad2:	37 95       	ror	r19
 ad4:	27 95       	ror	r18
 ad6:	a7 95       	ror	r26
 ad8:	f0 40       	sbci	r31, 0x00	; 0
 ada:	53 95       	inc	r21
 adc:	c9 f7       	brne	.-14     	; 0xad0 <__addsf3x+0x4e>
 ade:	7e f4       	brtc	.+30     	; 0xafe <__addsf3x+0x7c>
 ae0:	1f 16       	cp	r1, r31
 ae2:	ba 0b       	sbc	r27, r26
 ae4:	62 0b       	sbc	r22, r18
 ae6:	73 0b       	sbc	r23, r19
 ae8:	84 0b       	sbc	r24, r20
 aea:	ba f0       	brmi	.+46     	; 0xb1a <__addsf3x+0x98>
 aec:	91 50       	subi	r25, 0x01	; 1
 aee:	a1 f0       	breq	.+40     	; 0xb18 <__addsf3x+0x96>
 af0:	ff 0f       	add	r31, r31
 af2:	bb 1f       	adc	r27, r27
 af4:	66 1f       	adc	r22, r22
 af6:	77 1f       	adc	r23, r23
 af8:	88 1f       	adc	r24, r24
 afa:	c2 f7       	brpl	.-16     	; 0xaec <__addsf3x+0x6a>
 afc:	0e c0       	rjmp	.+28     	; 0xb1a <__addsf3x+0x98>
 afe:	ba 0f       	add	r27, r26
 b00:	62 1f       	adc	r22, r18
 b02:	73 1f       	adc	r23, r19
 b04:	84 1f       	adc	r24, r20
 b06:	48 f4       	brcc	.+18     	; 0xb1a <__addsf3x+0x98>
 b08:	87 95       	ror	r24
 b0a:	77 95       	ror	r23
 b0c:	67 95       	ror	r22
 b0e:	b7 95       	ror	r27
 b10:	f7 95       	ror	r31
 b12:	9e 3f       	cpi	r25, 0xFE	; 254
 b14:	08 f0       	brcs	.+2      	; 0xb18 <__addsf3x+0x96>
 b16:	b3 cf       	rjmp	.-154    	; 0xa7e <__addsf3+0x1e>
 b18:	93 95       	inc	r25
 b1a:	88 0f       	add	r24, r24
 b1c:	08 f0       	brcs	.+2      	; 0xb20 <__addsf3x+0x9e>
 b1e:	99 27       	eor	r25, r25
 b20:	ee 0f       	add	r30, r30
 b22:	97 95       	ror	r25
 b24:	87 95       	ror	r24
 b26:	08 95       	ret

00000b28 <__divsf3>:
 b28:	0c d0       	rcall	.+24     	; 0xb42 <__divsf3x>
 b2a:	eb c0       	rjmp	.+470    	; 0xd02 <__fp_round>
 b2c:	e3 d0       	rcall	.+454    	; 0xcf4 <__fp_pscB>
 b2e:	40 f0       	brcs	.+16     	; 0xb40 <__divsf3+0x18>
 b30:	da d0       	rcall	.+436    	; 0xce6 <__fp_pscA>
 b32:	30 f0       	brcs	.+12     	; 0xb40 <__divsf3+0x18>
 b34:	21 f4       	brne	.+8      	; 0xb3e <__divsf3+0x16>
 b36:	5f 3f       	cpi	r21, 0xFF	; 255
 b38:	19 f0       	breq	.+6      	; 0xb40 <__divsf3+0x18>
 b3a:	cc c0       	rjmp	.+408    	; 0xcd4 <__fp_inf>
 b3c:	51 11       	cpse	r21, r1
 b3e:	15 c1       	rjmp	.+554    	; 0xd6a <__fp_szero>
 b40:	cf c0       	rjmp	.+414    	; 0xce0 <__fp_nan>

00000b42 <__divsf3x>:
 b42:	f0 d0       	rcall	.+480    	; 0xd24 <__fp_split3>
 b44:	98 f3       	brcs	.-26     	; 0xb2c <__divsf3+0x4>

00000b46 <__divsf3_pse>:
 b46:	99 23       	and	r25, r25
 b48:	c9 f3       	breq	.-14     	; 0xb3c <__divsf3+0x14>
 b4a:	55 23       	and	r21, r21
 b4c:	b1 f3       	breq	.-20     	; 0xb3a <__divsf3+0x12>
 b4e:	95 1b       	sub	r25, r21
 b50:	55 0b       	sbc	r21, r21
 b52:	bb 27       	eor	r27, r27
 b54:	aa 27       	eor	r26, r26
 b56:	62 17       	cp	r22, r18
 b58:	73 07       	cpc	r23, r19
 b5a:	84 07       	cpc	r24, r20
 b5c:	38 f0       	brcs	.+14     	; 0xb6c <__divsf3_pse+0x26>
 b5e:	9f 5f       	subi	r25, 0xFF	; 255
 b60:	5f 4f       	sbci	r21, 0xFF	; 255
 b62:	22 0f       	add	r18, r18
 b64:	33 1f       	adc	r19, r19
 b66:	44 1f       	adc	r20, r20
 b68:	aa 1f       	adc	r26, r26
 b6a:	a9 f3       	breq	.-22     	; 0xb56 <__divsf3_pse+0x10>
 b6c:	33 d0       	rcall	.+102    	; 0xbd4 <__divsf3_pse+0x8e>
 b6e:	0e 2e       	mov	r0, r30
 b70:	3a f0       	brmi	.+14     	; 0xb80 <__divsf3_pse+0x3a>
 b72:	e0 e8       	ldi	r30, 0x80	; 128
 b74:	30 d0       	rcall	.+96     	; 0xbd6 <__divsf3_pse+0x90>
 b76:	91 50       	subi	r25, 0x01	; 1
 b78:	50 40       	sbci	r21, 0x00	; 0
 b7a:	e6 95       	lsr	r30
 b7c:	00 1c       	adc	r0, r0
 b7e:	ca f7       	brpl	.-14     	; 0xb72 <__divsf3_pse+0x2c>
 b80:	29 d0       	rcall	.+82     	; 0xbd4 <__divsf3_pse+0x8e>
 b82:	fe 2f       	mov	r31, r30
 b84:	27 d0       	rcall	.+78     	; 0xbd4 <__divsf3_pse+0x8e>
 b86:	66 0f       	add	r22, r22
 b88:	77 1f       	adc	r23, r23
 b8a:	88 1f       	adc	r24, r24
 b8c:	bb 1f       	adc	r27, r27
 b8e:	26 17       	cp	r18, r22
 b90:	37 07       	cpc	r19, r23
 b92:	48 07       	cpc	r20, r24
 b94:	ab 07       	cpc	r26, r27
 b96:	b0 e8       	ldi	r27, 0x80	; 128
 b98:	09 f0       	breq	.+2      	; 0xb9c <__divsf3_pse+0x56>
 b9a:	bb 0b       	sbc	r27, r27
 b9c:	80 2d       	mov	r24, r0
 b9e:	bf 01       	movw	r22, r30
 ba0:	ff 27       	eor	r31, r31
 ba2:	93 58       	subi	r25, 0x83	; 131
 ba4:	5f 4f       	sbci	r21, 0xFF	; 255
 ba6:	2a f0       	brmi	.+10     	; 0xbb2 <__divsf3_pse+0x6c>
 ba8:	9e 3f       	cpi	r25, 0xFE	; 254
 baa:	51 05       	cpc	r21, r1
 bac:	68 f0       	brcs	.+26     	; 0xbc8 <__divsf3_pse+0x82>
 bae:	92 c0       	rjmp	.+292    	; 0xcd4 <__fp_inf>
 bb0:	dc c0       	rjmp	.+440    	; 0xd6a <__fp_szero>
 bb2:	5f 3f       	cpi	r21, 0xFF	; 255
 bb4:	ec f3       	brlt	.-6      	; 0xbb0 <__divsf3_pse+0x6a>
 bb6:	98 3e       	cpi	r25, 0xE8	; 232
 bb8:	dc f3       	brlt	.-10     	; 0xbb0 <__divsf3_pse+0x6a>
 bba:	86 95       	lsr	r24
 bbc:	77 95       	ror	r23
 bbe:	67 95       	ror	r22
 bc0:	b7 95       	ror	r27
 bc2:	f7 95       	ror	r31
 bc4:	9f 5f       	subi	r25, 0xFF	; 255
 bc6:	c9 f7       	brne	.-14     	; 0xbba <__divsf3_pse+0x74>
 bc8:	88 0f       	add	r24, r24
 bca:	91 1d       	adc	r25, r1
 bcc:	96 95       	lsr	r25
 bce:	87 95       	ror	r24
 bd0:	97 f9       	bld	r25, 7
 bd2:	08 95       	ret
 bd4:	e1 e0       	ldi	r30, 0x01	; 1
 bd6:	66 0f       	add	r22, r22
 bd8:	77 1f       	adc	r23, r23
 bda:	88 1f       	adc	r24, r24
 bdc:	bb 1f       	adc	r27, r27
 bde:	62 17       	cp	r22, r18
 be0:	73 07       	cpc	r23, r19
 be2:	84 07       	cpc	r24, r20
 be4:	ba 07       	cpc	r27, r26
 be6:	20 f0       	brcs	.+8      	; 0xbf0 <__divsf3_pse+0xaa>
 be8:	62 1b       	sub	r22, r18
 bea:	73 0b       	sbc	r23, r19
 bec:	84 0b       	sbc	r24, r20
 bee:	ba 0b       	sbc	r27, r26
 bf0:	ee 1f       	adc	r30, r30
 bf2:	88 f7       	brcc	.-30     	; 0xbd6 <__divsf3_pse+0x90>
 bf4:	e0 95       	com	r30
 bf6:	08 95       	ret

00000bf8 <__fixsfsi>:
 bf8:	04 d0       	rcall	.+8      	; 0xc02 <__fixunssfsi>
 bfa:	68 94       	set
 bfc:	b1 11       	cpse	r27, r1
 bfe:	b5 c0       	rjmp	.+362    	; 0xd6a <__fp_szero>
 c00:	08 95       	ret

00000c02 <__fixunssfsi>:
 c02:	98 d0       	rcall	.+304    	; 0xd34 <__fp_splitA>
 c04:	88 f0       	brcs	.+34     	; 0xc28 <__fixunssfsi+0x26>
 c06:	9f 57       	subi	r25, 0x7F	; 127
 c08:	90 f0       	brcs	.+36     	; 0xc2e <__fixunssfsi+0x2c>
 c0a:	b9 2f       	mov	r27, r25
 c0c:	99 27       	eor	r25, r25
 c0e:	b7 51       	subi	r27, 0x17	; 23
 c10:	a0 f0       	brcs	.+40     	; 0xc3a <__fixunssfsi+0x38>
 c12:	d1 f0       	breq	.+52     	; 0xc48 <__fixunssfsi+0x46>
 c14:	66 0f       	add	r22, r22
 c16:	77 1f       	adc	r23, r23
 c18:	88 1f       	adc	r24, r24
 c1a:	99 1f       	adc	r25, r25
 c1c:	1a f0       	brmi	.+6      	; 0xc24 <__fixunssfsi+0x22>
 c1e:	ba 95       	dec	r27
 c20:	c9 f7       	brne	.-14     	; 0xc14 <__fixunssfsi+0x12>
 c22:	12 c0       	rjmp	.+36     	; 0xc48 <__fixunssfsi+0x46>
 c24:	b1 30       	cpi	r27, 0x01	; 1
 c26:	81 f0       	breq	.+32     	; 0xc48 <__fixunssfsi+0x46>
 c28:	9f d0       	rcall	.+318    	; 0xd68 <__fp_zero>
 c2a:	b1 e0       	ldi	r27, 0x01	; 1
 c2c:	08 95       	ret
 c2e:	9c c0       	rjmp	.+312    	; 0xd68 <__fp_zero>
 c30:	67 2f       	mov	r22, r23
 c32:	78 2f       	mov	r23, r24
 c34:	88 27       	eor	r24, r24
 c36:	b8 5f       	subi	r27, 0xF8	; 248
 c38:	39 f0       	breq	.+14     	; 0xc48 <__fixunssfsi+0x46>
 c3a:	b9 3f       	cpi	r27, 0xF9	; 249
 c3c:	cc f3       	brlt	.-14     	; 0xc30 <__fixunssfsi+0x2e>
 c3e:	86 95       	lsr	r24
 c40:	77 95       	ror	r23
 c42:	67 95       	ror	r22
 c44:	b3 95       	inc	r27
 c46:	d9 f7       	brne	.-10     	; 0xc3e <__fixunssfsi+0x3c>
 c48:	3e f4       	brtc	.+14     	; 0xc58 <__fixunssfsi+0x56>
 c4a:	90 95       	com	r25
 c4c:	80 95       	com	r24
 c4e:	70 95       	com	r23
 c50:	61 95       	neg	r22
 c52:	7f 4f       	sbci	r23, 0xFF	; 255
 c54:	8f 4f       	sbci	r24, 0xFF	; 255
 c56:	9f 4f       	sbci	r25, 0xFF	; 255
 c58:	08 95       	ret

00000c5a <__floatunsisf>:
 c5a:	e8 94       	clt
 c5c:	09 c0       	rjmp	.+18     	; 0xc70 <__floatsisf+0x12>

00000c5e <__floatsisf>:
 c5e:	97 fb       	bst	r25, 7
 c60:	3e f4       	brtc	.+14     	; 0xc70 <__floatsisf+0x12>
 c62:	90 95       	com	r25
 c64:	80 95       	com	r24
 c66:	70 95       	com	r23
 c68:	61 95       	neg	r22
 c6a:	7f 4f       	sbci	r23, 0xFF	; 255
 c6c:	8f 4f       	sbci	r24, 0xFF	; 255
 c6e:	9f 4f       	sbci	r25, 0xFF	; 255
 c70:	99 23       	and	r25, r25
 c72:	a9 f0       	breq	.+42     	; 0xc9e <__floatsisf+0x40>
 c74:	f9 2f       	mov	r31, r25
 c76:	96 e9       	ldi	r25, 0x96	; 150
 c78:	bb 27       	eor	r27, r27
 c7a:	93 95       	inc	r25
 c7c:	f6 95       	lsr	r31
 c7e:	87 95       	ror	r24
 c80:	77 95       	ror	r23
 c82:	67 95       	ror	r22
 c84:	b7 95       	ror	r27
 c86:	f1 11       	cpse	r31, r1
 c88:	f8 cf       	rjmp	.-16     	; 0xc7a <__floatsisf+0x1c>
 c8a:	fa f4       	brpl	.+62     	; 0xcca <__floatsisf+0x6c>
 c8c:	bb 0f       	add	r27, r27
 c8e:	11 f4       	brne	.+4      	; 0xc94 <__floatsisf+0x36>
 c90:	60 ff       	sbrs	r22, 0
 c92:	1b c0       	rjmp	.+54     	; 0xcca <__floatsisf+0x6c>
 c94:	6f 5f       	subi	r22, 0xFF	; 255
 c96:	7f 4f       	sbci	r23, 0xFF	; 255
 c98:	8f 4f       	sbci	r24, 0xFF	; 255
 c9a:	9f 4f       	sbci	r25, 0xFF	; 255
 c9c:	16 c0       	rjmp	.+44     	; 0xcca <__floatsisf+0x6c>
 c9e:	88 23       	and	r24, r24
 ca0:	11 f0       	breq	.+4      	; 0xca6 <__floatsisf+0x48>
 ca2:	96 e9       	ldi	r25, 0x96	; 150
 ca4:	11 c0       	rjmp	.+34     	; 0xcc8 <__floatsisf+0x6a>
 ca6:	77 23       	and	r23, r23
 ca8:	21 f0       	breq	.+8      	; 0xcb2 <__floatsisf+0x54>
 caa:	9e e8       	ldi	r25, 0x8E	; 142
 cac:	87 2f       	mov	r24, r23
 cae:	76 2f       	mov	r23, r22
 cb0:	05 c0       	rjmp	.+10     	; 0xcbc <__floatsisf+0x5e>
 cb2:	66 23       	and	r22, r22
 cb4:	71 f0       	breq	.+28     	; 0xcd2 <__floatsisf+0x74>
 cb6:	96 e8       	ldi	r25, 0x86	; 134
 cb8:	86 2f       	mov	r24, r22
 cba:	70 e0       	ldi	r23, 0x00	; 0
 cbc:	60 e0       	ldi	r22, 0x00	; 0
 cbe:	2a f0       	brmi	.+10     	; 0xcca <__floatsisf+0x6c>
 cc0:	9a 95       	dec	r25
 cc2:	66 0f       	add	r22, r22
 cc4:	77 1f       	adc	r23, r23
 cc6:	88 1f       	adc	r24, r24
 cc8:	da f7       	brpl	.-10     	; 0xcc0 <__floatsisf+0x62>
 cca:	88 0f       	add	r24, r24
 ccc:	96 95       	lsr	r25
 cce:	87 95       	ror	r24
 cd0:	97 f9       	bld	r25, 7
 cd2:	08 95       	ret

00000cd4 <__fp_inf>:
 cd4:	97 f9       	bld	r25, 7
 cd6:	9f 67       	ori	r25, 0x7F	; 127
 cd8:	80 e8       	ldi	r24, 0x80	; 128
 cda:	70 e0       	ldi	r23, 0x00	; 0
 cdc:	60 e0       	ldi	r22, 0x00	; 0
 cde:	08 95       	ret

00000ce0 <__fp_nan>:
 ce0:	9f ef       	ldi	r25, 0xFF	; 255
 ce2:	80 ec       	ldi	r24, 0xC0	; 192
 ce4:	08 95       	ret

00000ce6 <__fp_pscA>:
 ce6:	00 24       	eor	r0, r0
 ce8:	0a 94       	dec	r0
 cea:	16 16       	cp	r1, r22
 cec:	17 06       	cpc	r1, r23
 cee:	18 06       	cpc	r1, r24
 cf0:	09 06       	cpc	r0, r25
 cf2:	08 95       	ret

00000cf4 <__fp_pscB>:
 cf4:	00 24       	eor	r0, r0
 cf6:	0a 94       	dec	r0
 cf8:	12 16       	cp	r1, r18
 cfa:	13 06       	cpc	r1, r19
 cfc:	14 06       	cpc	r1, r20
 cfe:	05 06       	cpc	r0, r21
 d00:	08 95       	ret

00000d02 <__fp_round>:
 d02:	09 2e       	mov	r0, r25
 d04:	03 94       	inc	r0
 d06:	00 0c       	add	r0, r0
 d08:	11 f4       	brne	.+4      	; 0xd0e <__fp_round+0xc>
 d0a:	88 23       	and	r24, r24
 d0c:	52 f0       	brmi	.+20     	; 0xd22 <__fp_round+0x20>
 d0e:	bb 0f       	add	r27, r27
 d10:	40 f4       	brcc	.+16     	; 0xd22 <__fp_round+0x20>
 d12:	bf 2b       	or	r27, r31
 d14:	11 f4       	brne	.+4      	; 0xd1a <__fp_round+0x18>
 d16:	60 ff       	sbrs	r22, 0
 d18:	04 c0       	rjmp	.+8      	; 0xd22 <__fp_round+0x20>
 d1a:	6f 5f       	subi	r22, 0xFF	; 255
 d1c:	7f 4f       	sbci	r23, 0xFF	; 255
 d1e:	8f 4f       	sbci	r24, 0xFF	; 255
 d20:	9f 4f       	sbci	r25, 0xFF	; 255
 d22:	08 95       	ret

00000d24 <__fp_split3>:
 d24:	57 fd       	sbrc	r21, 7
 d26:	90 58       	subi	r25, 0x80	; 128
 d28:	44 0f       	add	r20, r20
 d2a:	55 1f       	adc	r21, r21
 d2c:	59 f0       	breq	.+22     	; 0xd44 <__fp_splitA+0x10>
 d2e:	5f 3f       	cpi	r21, 0xFF	; 255
 d30:	71 f0       	breq	.+28     	; 0xd4e <__fp_splitA+0x1a>
 d32:	47 95       	ror	r20

00000d34 <__fp_splitA>:
 d34:	88 0f       	add	r24, r24
 d36:	97 fb       	bst	r25, 7
 d38:	99 1f       	adc	r25, r25
 d3a:	61 f0       	breq	.+24     	; 0xd54 <__fp_splitA+0x20>
 d3c:	9f 3f       	cpi	r25, 0xFF	; 255
 d3e:	79 f0       	breq	.+30     	; 0xd5e <__fp_splitA+0x2a>
 d40:	87 95       	ror	r24
 d42:	08 95       	ret
 d44:	12 16       	cp	r1, r18
 d46:	13 06       	cpc	r1, r19
 d48:	14 06       	cpc	r1, r20
 d4a:	55 1f       	adc	r21, r21
 d4c:	f2 cf       	rjmp	.-28     	; 0xd32 <__fp_split3+0xe>
 d4e:	46 95       	lsr	r20
 d50:	f1 df       	rcall	.-30     	; 0xd34 <__fp_splitA>
 d52:	08 c0       	rjmp	.+16     	; 0xd64 <__fp_splitA+0x30>
 d54:	16 16       	cp	r1, r22
 d56:	17 06       	cpc	r1, r23
 d58:	18 06       	cpc	r1, r24
 d5a:	99 1f       	adc	r25, r25
 d5c:	f1 cf       	rjmp	.-30     	; 0xd40 <__fp_splitA+0xc>
 d5e:	86 95       	lsr	r24
 d60:	71 05       	cpc	r23, r1
 d62:	61 05       	cpc	r22, r1
 d64:	08 94       	sec
 d66:	08 95       	ret

00000d68 <__fp_zero>:
 d68:	e8 94       	clt

00000d6a <__fp_szero>:
 d6a:	bb 27       	eor	r27, r27
 d6c:	66 27       	eor	r22, r22
 d6e:	77 27       	eor	r23, r23
 d70:	cb 01       	movw	r24, r22
 d72:	97 f9       	bld	r25, 7
 d74:	08 95       	ret

00000d76 <__mulsf3>:
 d76:	0b d0       	rcall	.+22     	; 0xd8e <__mulsf3x>
 d78:	c4 cf       	rjmp	.-120    	; 0xd02 <__fp_round>
 d7a:	b5 df       	rcall	.-150    	; 0xce6 <__fp_pscA>
 d7c:	28 f0       	brcs	.+10     	; 0xd88 <__mulsf3+0x12>
 d7e:	ba df       	rcall	.-140    	; 0xcf4 <__fp_pscB>
 d80:	18 f0       	brcs	.+6      	; 0xd88 <__mulsf3+0x12>
 d82:	95 23       	and	r25, r21
 d84:	09 f0       	breq	.+2      	; 0xd88 <__mulsf3+0x12>
 d86:	a6 cf       	rjmp	.-180    	; 0xcd4 <__fp_inf>
 d88:	ab cf       	rjmp	.-170    	; 0xce0 <__fp_nan>
 d8a:	11 24       	eor	r1, r1
 d8c:	ee cf       	rjmp	.-36     	; 0xd6a <__fp_szero>

00000d8e <__mulsf3x>:
 d8e:	ca df       	rcall	.-108    	; 0xd24 <__fp_split3>
 d90:	a0 f3       	brcs	.-24     	; 0xd7a <__mulsf3+0x4>

00000d92 <__mulsf3_pse>:
 d92:	95 9f       	mul	r25, r21
 d94:	d1 f3       	breq	.-12     	; 0xd8a <__mulsf3+0x14>
 d96:	95 0f       	add	r25, r21
 d98:	50 e0       	ldi	r21, 0x00	; 0
 d9a:	55 1f       	adc	r21, r21
 d9c:	62 9f       	mul	r22, r18
 d9e:	f0 01       	movw	r30, r0
 da0:	72 9f       	mul	r23, r18
 da2:	bb 27       	eor	r27, r27
 da4:	f0 0d       	add	r31, r0
 da6:	b1 1d       	adc	r27, r1
 da8:	63 9f       	mul	r22, r19
 daa:	aa 27       	eor	r26, r26
 dac:	f0 0d       	add	r31, r0
 dae:	b1 1d       	adc	r27, r1
 db0:	aa 1f       	adc	r26, r26
 db2:	64 9f       	mul	r22, r20
 db4:	66 27       	eor	r22, r22
 db6:	b0 0d       	add	r27, r0
 db8:	a1 1d       	adc	r26, r1
 dba:	66 1f       	adc	r22, r22
 dbc:	82 9f       	mul	r24, r18
 dbe:	22 27       	eor	r18, r18
 dc0:	b0 0d       	add	r27, r0
 dc2:	a1 1d       	adc	r26, r1
 dc4:	62 1f       	adc	r22, r18
 dc6:	73 9f       	mul	r23, r19
 dc8:	b0 0d       	add	r27, r0
 dca:	a1 1d       	adc	r26, r1
 dcc:	62 1f       	adc	r22, r18
 dce:	83 9f       	mul	r24, r19
 dd0:	a0 0d       	add	r26, r0
 dd2:	61 1d       	adc	r22, r1
 dd4:	22 1f       	adc	r18, r18
 dd6:	74 9f       	mul	r23, r20
 dd8:	33 27       	eor	r19, r19
 dda:	a0 0d       	add	r26, r0
 ddc:	61 1d       	adc	r22, r1
 dde:	23 1f       	adc	r18, r19
 de0:	84 9f       	mul	r24, r20
 de2:	60 0d       	add	r22, r0
 de4:	21 1d       	adc	r18, r1
 de6:	82 2f       	mov	r24, r18
 de8:	76 2f       	mov	r23, r22
 dea:	6a 2f       	mov	r22, r26
 dec:	11 24       	eor	r1, r1
 dee:	9f 57       	subi	r25, 0x7F	; 127
 df0:	50 40       	sbci	r21, 0x00	; 0
 df2:	8a f0       	brmi	.+34     	; 0xe16 <__mulsf3_pse+0x84>
 df4:	e1 f0       	breq	.+56     	; 0xe2e <__mulsf3_pse+0x9c>
 df6:	88 23       	and	r24, r24
 df8:	4a f0       	brmi	.+18     	; 0xe0c <__mulsf3_pse+0x7a>
 dfa:	ee 0f       	add	r30, r30
 dfc:	ff 1f       	adc	r31, r31
 dfe:	bb 1f       	adc	r27, r27
 e00:	66 1f       	adc	r22, r22
 e02:	77 1f       	adc	r23, r23
 e04:	88 1f       	adc	r24, r24
 e06:	91 50       	subi	r25, 0x01	; 1
 e08:	50 40       	sbci	r21, 0x00	; 0
 e0a:	a9 f7       	brne	.-22     	; 0xdf6 <__mulsf3_pse+0x64>
 e0c:	9e 3f       	cpi	r25, 0xFE	; 254
 e0e:	51 05       	cpc	r21, r1
 e10:	70 f0       	brcs	.+28     	; 0xe2e <__mulsf3_pse+0x9c>
 e12:	60 cf       	rjmp	.-320    	; 0xcd4 <__fp_inf>
 e14:	aa cf       	rjmp	.-172    	; 0xd6a <__fp_szero>
 e16:	5f 3f       	cpi	r21, 0xFF	; 255
 e18:	ec f3       	brlt	.-6      	; 0xe14 <__mulsf3_pse+0x82>
 e1a:	98 3e       	cpi	r25, 0xE8	; 232
 e1c:	dc f3       	brlt	.-10     	; 0xe14 <__mulsf3_pse+0x82>
 e1e:	86 95       	lsr	r24
 e20:	77 95       	ror	r23
 e22:	67 95       	ror	r22
 e24:	b7 95       	ror	r27
 e26:	f7 95       	ror	r31
 e28:	e7 95       	ror	r30
 e2a:	9f 5f       	subi	r25, 0xFF	; 255
 e2c:	c1 f7       	brne	.-16     	; 0xe1e <__mulsf3_pse+0x8c>
 e2e:	fe 2b       	or	r31, r30
 e30:	88 0f       	add	r24, r24
 e32:	91 1d       	adc	r25, r1
 e34:	96 95       	lsr	r25
 e36:	87 95       	ror	r24
 e38:	97 f9       	bld	r25, 7
 e3a:	08 95       	ret

00000e3c <__udivmodsi4>:
 e3c:	a1 e2       	ldi	r26, 0x21	; 33
 e3e:	1a 2e       	mov	r1, r26
 e40:	aa 1b       	sub	r26, r26
 e42:	bb 1b       	sub	r27, r27
 e44:	fd 01       	movw	r30, r26
 e46:	0d c0       	rjmp	.+26     	; 0xe62 <__udivmodsi4_ep>

00000e48 <__udivmodsi4_loop>:
 e48:	aa 1f       	adc	r26, r26
 e4a:	bb 1f       	adc	r27, r27
 e4c:	ee 1f       	adc	r30, r30
 e4e:	ff 1f       	adc	r31, r31
 e50:	a2 17       	cp	r26, r18
 e52:	b3 07       	cpc	r27, r19
 e54:	e4 07       	cpc	r30, r20
 e56:	f5 07       	cpc	r31, r21
 e58:	20 f0       	brcs	.+8      	; 0xe62 <__udivmodsi4_ep>
 e5a:	a2 1b       	sub	r26, r18
 e5c:	b3 0b       	sbc	r27, r19
 e5e:	e4 0b       	sbc	r30, r20
 e60:	f5 0b       	sbc	r31, r21

00000e62 <__udivmodsi4_ep>:
 e62:	66 1f       	adc	r22, r22
 e64:	77 1f       	adc	r23, r23
 e66:	88 1f       	adc	r24, r24
 e68:	99 1f       	adc	r25, r25
 e6a:	1a 94       	dec	r1
 e6c:	69 f7       	brne	.-38     	; 0xe48 <__udivmodsi4_loop>
 e6e:	60 95       	com	r22
 e70:	70 95       	com	r23
 e72:	80 95       	com	r24
 e74:	90 95       	com	r25
 e76:	9b 01       	movw	r18, r22
 e78:	ac 01       	movw	r20, r24
 e7a:	bd 01       	movw	r22, r26
 e7c:	cf 01       	movw	r24, r30
 e7e:	08 95       	ret

00000e80 <__umulhisi3>:
 e80:	a2 9f       	mul	r26, r18
 e82:	b0 01       	movw	r22, r0
 e84:	b3 9f       	mul	r27, r19
 e86:	c0 01       	movw	r24, r0
 e88:	a3 9f       	mul	r26, r19
 e8a:	01 d0       	rcall	.+2      	; 0xe8e <__umulhisi3+0xe>
 e8c:	b2 9f       	mul	r27, r18
 e8e:	70 0d       	add	r23, r0
 e90:	81 1d       	adc	r24, r1
 e92:	11 24       	eor	r1, r1
 e94:	91 1d       	adc	r25, r1
 e96:	08 95       	ret

00000e98 <_exit>:
 e98:	f8 94       	cli

00000e9a <__stop_program>:
 e9a:	ff cf       	rjmp	.-2      	; 0xe9a <__stop_program>

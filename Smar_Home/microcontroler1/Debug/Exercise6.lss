
Exercise6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  000010de  00001172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000a6  008000a6  000011b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ebd  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d0  00000000  00000000  000021f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c28  00000000  00000000  00002ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  000036f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d8  00000000  00000000  0000398c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000045d  00000000  00000000  00003e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000042c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      54:	f6 00       	.word	0x00f6	; ????
      56:	f8 00       	.word	0x00f8	; ????
      58:	fa 00       	.word	0x00fa	; ????
      5a:	fc 00       	.word	0x00fc	; ????
      5c:	fe 00       	.word	0x00fe	; ????
      5e:	00 01       	movw	r0, r0
      60:	02 01       	movw	r0, r4
      62:	04 01       	movw	r0, r8
      64:	06 01       	movw	r0, r12
      66:	08 01       	movw	r0, r16
      68:	0a 01       	movw	r0, r20
      6a:	0c 01       	movw	r0, r24
      6c:	0e 01       	movw	r0, r28
      6e:	10 01       	movw	r2, r0
      70:	12 01       	movw	r2, r4
      72:	14 01       	movw	r2, r8

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf e5       	ldi	r28, 0x5F	; 95
      7a:	d4 e0       	ldi	r29, 0x04	; 4
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	10 e0       	ldi	r17, 0x00	; 0
      82:	a0 e6       	ldi	r26, 0x60	; 96
      84:	b0 e0       	ldi	r27, 0x00	; 0
      86:	ee ed       	ldi	r30, 0xDE	; 222
      88:	f0 e1       	ldi	r31, 0x10	; 16
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	a6 3a       	cpi	r26, 0xA6	; 166
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	20 e0       	ldi	r18, 0x00	; 0
      98:	a6 ea       	ldi	r26, 0xA6	; 166
      9a:	b0 e0       	ldi	r27, 0x00	; 0
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	a9 3a       	cpi	r26, 0xA9	; 169
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
      aa:	0c 94 6d 08 	jmp	0x10da	; 0x10da <_exit>

000000ae <__bad_interrupt>:
      ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <delaycounter>:
 * Created: 8/31/2019 1:44:12 PM
 *  Author: omar
 */ 
#include "delay by counter.h"
void  delaycounter (void) //this function used to slow the response of keypad to prevent fill LCD and UART on Proteus
 {int counter=0;
      b2:	cf 93       	push	r28
      b4:	df 93       	push	r29
      b6:	00 d0       	rcall	.+0      	; 0xb8 <delaycounter+0x6>
      b8:	cd b7       	in	r28, 0x3d	; 61
      ba:	de b7       	in	r29, 0x3e	; 62
      bc:	1a 82       	std	Y+2, r1	; 0x02
      be:	19 82       	std	Y+1, r1	; 0x01
	   while (counter<=10000)
      c0:	05 c0       	rjmp	.+10     	; 0xcc <delaycounter+0x1a>
	   {      
		   counter++;   
      c2:	89 81       	ldd	r24, Y+1	; 0x01
      c4:	9a 81       	ldd	r25, Y+2	; 0x02
      c6:	01 96       	adiw	r24, 0x01	; 1
      c8:	9a 83       	std	Y+2, r25	; 0x02
      ca:	89 83       	std	Y+1, r24	; 0x01
 *  Author: omar
 */ 
#include "delay by counter.h"
void  delaycounter (void) //this function used to slow the response of keypad to prevent fill LCD and UART on Proteus
 {int counter=0;
	   while (counter<=10000)
      cc:	89 81       	ldd	r24, Y+1	; 0x01
      ce:	9a 81       	ldd	r25, Y+2	; 0x02
      d0:	81 31       	cpi	r24, 0x11	; 17
      d2:	97 42       	sbci	r25, 0x27	; 39
      d4:	b4 f3       	brlt	.-20     	; 0xc2 <delaycounter+0x10>
	   {      
		   counter++;   
	   }
      d6:	00 00       	nop
      d8:	0f 90       	pop	r0
      da:	0f 90       	pop	r0
      dc:	df 91       	pop	r29
      de:	cf 91       	pop	r28
      e0:	08 95       	ret

000000e2 <main>:
 * Created: 1/23/2014 9:50:20 PM
 *  Author: Mohamed Tarek
 */ 
#include "mainproject.h"
int main(void)
{
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	cd b7       	in	r28, 0x3d	; 61
      e8:	de b7       	in	r29, 0x3e	; 62
	LCD_init();// LCD initialization
      ea:	0e 94 40 03 	call	0x680	; 0x680 <LCD_init>
	UART_init();// UART initialization
      ee:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <UART_init>
    while(1)
    { 
		n=UART_recievebyte();//the function going to receive first UART and give it to valuable "n" to know if he want to go inti, true, false and system closed.
      f2:	0e 94 3a 07 	call	0xe74	; 0xe74 <UART_recievebyte>
      f6:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <n>
	    inti_of_program();//the LCD going to ask for password for true password type 2333.
      fa:	0e 94 fe 05 	call	0xbfc	; 0xbfc <inti_of_program>
	    true_password();//will enter this function when the password is true by receive 2 ON UDR.
      fe:	0e 94 38 06 	call	0xc70	; 0xc70 <true_password>
		false_password();//will enter this function when password is wrong by receive 3 on UDR.
     102:	0e 94 4b 06 	call	0xc96	; 0xc96 <false_password>
		reset_a_3times();//if user enter password 3 times wrong the system just stop and cant accept any thing from keypad.
     106:	0e 94 dd 06 	call	0xdba	; 0xdba <reset_a_3times>
    }
     10a:	f3 cf       	rjmp	.-26     	; 0xf2 <main+0x10>

0000010c <KeyPad_getPressedKey>:

#include "keypad.h"
#include "delay by counter.h"


uint8 KeyPad_getPressedKey(void){
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	00 d0       	rcall	.+0      	; 0x112 <KeyPad_getPressedKey+0x6>
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     116:	19 82       	std	Y+1, r1	; 0x01
     118:	44 c0       	rjmp	.+136    	; 0x1a2 <KeyPad_getPressedKey+0x96>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
     11a:	8a e3       	ldi	r24, 0x3A	; 58
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	29 81       	ldd	r18, Y+1	; 0x01
     120:	42 2f       	mov	r20, r18
     122:	50 e0       	ldi	r21, 0x00	; 0
     124:	20 e1       	ldi	r18, 0x10	; 16
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	02 c0       	rjmp	.+4      	; 0x12e <KeyPad_getPressedKey+0x22>
     12a:	22 0f       	add	r18, r18
     12c:	33 1f       	adc	r19, r19
     12e:	4a 95       	dec	r20
     130:	e2 f7       	brpl	.-8      	; 0x12a <KeyPad_getPressedKey+0x1e>
     132:	fc 01       	movw	r30, r24
     134:	20 83       	st	Z, r18
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
     136:	8b e3       	ldi	r24, 0x3B	; 59
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	29 81       	ldd	r18, Y+1	; 0x01
     13c:	42 2f       	mov	r20, r18
     13e:	50 e0       	ldi	r21, 0x00	; 0
     140:	20 e1       	ldi	r18, 0x10	; 16
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	02 c0       	rjmp	.+4      	; 0x14a <KeyPad_getPressedKey+0x3e>
     146:	22 0f       	add	r18, r18
     148:	33 1f       	adc	r19, r19
     14a:	4a 95       	dec	r20
     14c:	e2 f7       	brpl	.-8      	; 0x146 <KeyPad_getPressedKey+0x3a>
     14e:	20 95       	com	r18
     150:	fc 01       	movw	r30, r24
     152:	20 83       	st	Z, r18
			for(row=0;row<N_row;row++) /* loop for rows */
     154:	1a 82       	std	Y+2, r1	; 0x02
     156:	1f c0       	rjmp	.+62     	; 0x196 <KeyPad_getPressedKey+0x8a>
			{
				if(!(KEYPAD_PORT_IN & (1<<row))) /* if the switch is press in this row */ 
     158:	89 e3       	ldi	r24, 0x39	; 57
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	fc 01       	movw	r30, r24
     15e:	80 81       	ld	r24, Z
     160:	88 2f       	mov	r24, r24
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	2a 81       	ldd	r18, Y+2	; 0x02
     166:	22 2f       	mov	r18, r18
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	02 c0       	rjmp	.+4      	; 0x170 <KeyPad_getPressedKey+0x64>
     16c:	95 95       	asr	r25
     16e:	87 95       	ror	r24
     170:	2a 95       	dec	r18
     172:	e2 f7       	brpl	.-8      	; 0x16c <KeyPad_getPressedKey+0x60>
     174:	81 70       	andi	r24, 0x01	; 1
     176:	99 27       	eor	r25, r25
     178:	89 2b       	or	r24, r25
     17a:	51 f4       	brne	.+20     	; 0x190 <KeyPad_getPressedKey+0x84>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
					
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
     17c:	8a 81       	ldd	r24, Y+2	; 0x02
     17e:	98 2f       	mov	r25, r24
     180:	99 0f       	add	r25, r25
     182:	99 0f       	add	r25, r25
     184:	89 81       	ldd	r24, Y+1	; 0x01
     186:	89 0f       	add	r24, r25
     188:	8f 5f       	subi	r24, 0xFF	; 255
     18a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <KeyPad_4x4_adjustKeyNumber>
     18e:	0e c0       	rjmp	.+28     	; 0x1ac <KeyPad_getPressedKey+0xa0>
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
     190:	8a 81       	ldd	r24, Y+2	; 0x02
     192:	8f 5f       	subi	r24, 0xFF	; 255
     194:	8a 83       	std	Y+2, r24	; 0x02
     196:	8a 81       	ldd	r24, Y+2	; 0x02
     198:	84 30       	cpi	r24, 0x04	; 4
     19a:	f0 f2       	brcs	.-68     	; 0x158 <KeyPad_getPressedKey+0x4c>

uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     19c:	89 81       	ldd	r24, Y+1	; 0x01
     19e:	8f 5f       	subi	r24, 0xFF	; 255
     1a0:	89 83       	std	Y+1, r24	; 0x01
     1a2:	89 81       	ldd	r24, Y+1	; 0x01
     1a4:	84 30       	cpi	r24, 0x04	; 4
     1a6:	08 f4       	brcc	.+2      	; 0x1aa <KeyPad_getPressedKey+0x9e>
     1a8:	b8 cf       	rjmp	.-144    	; 0x11a <KeyPad_getPressedKey+0xe>
				
					#endif				
				}
			}
		}
	}	
     1aa:	b5 cf       	rjmp	.-150    	; 0x116 <KeyPad_getPressedKey+0xa>
}
     1ac:	0f 90       	pop	r0
     1ae:	0f 90       	pop	r0
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	08 95       	ret

000001b6 <KeyPad_4x4_adjustKeyNumber>:


#elif (N_col == 4)
 
uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	1f 92       	push	r1
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
     1c0:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	88 2f       	mov	r24, r24
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	09 2e       	mov	r0, r25
     1ca:	00 0c       	add	r0, r0
     1cc:	aa 0b       	sbc	r26, r26
     1ce:	bb 0b       	sbc	r27, r27
     1d0:	41 e0       	ldi	r20, 0x01	; 1
     1d2:	50 e0       	ldi	r21, 0x00	; 0
     1d4:	2f e0       	ldi	r18, 0x0F	; 15
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	84 1b       	sub	r24, r20
     1da:	95 0b       	sbc	r25, r21
     1dc:	28 17       	cp	r18, r24
     1de:	39 07       	cpc	r19, r25
     1e0:	28 f1       	brcs	.+74     	; 0x22c <KeyPad_4x4_adjustKeyNumber+0x76>
     1e2:	86 5d       	subi	r24, 0xD6	; 214
     1e4:	9f 4f       	sbci	r25, 0xFF	; 255
     1e6:	fc 01       	movw	r30, r24
     1e8:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__tablejump2__>
	{
		case 1: return '7'; 
     1ec:	87 e3       	ldi	r24, 0x37	; 55
     1ee:	1f c0       	rjmp	.+62     	; 0x22e <KeyPad_4x4_adjustKeyNumber+0x78>
				break;
		case 2: return '8'; 
     1f0:	88 e3       	ldi	r24, 0x38	; 56
     1f2:	1d c0       	rjmp	.+58     	; 0x22e <KeyPad_4x4_adjustKeyNumber+0x78>
				break;
		case 3: return '9'; 
     1f4:	89 e3       	ldi	r24, 0x39	; 57
     1f6:	1b c0       	rjmp	.+54     	; 0x22e <KeyPad_4x4_adjustKeyNumber+0x78>
				break;
		case 4: return '%'; // ASCII Code of %
     1f8:	85 e2       	ldi	r24, 0x25	; 37
     1fa:	19 c0       	rjmp	.+50     	; 0x22e <KeyPad_4x4_adjustKeyNumber+0x78>
				break;
		case 5: return '4'; 
     1fc:	84 e3       	ldi	r24, 0x34	; 52
     1fe:	17 c0       	rjmp	.+46     	; 0x22e <KeyPad_4x4_adjustKeyNumber+0x78>
				break;
		case 6: return '5';
     200:	85 e3       	ldi	r24, 0x35	; 53
     202:	15 c0       	rjmp	.+42     	; 0x22e <KeyPad_4x4_adjustKeyNumber+0x78>
				break;
		case 7: return '6'; 
     204:	86 e3       	ldi	r24, 0x36	; 54
     206:	13 c0       	rjmp	.+38     	; 0x22e <KeyPad_4x4_adjustKeyNumber+0x78>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
     208:	8a e2       	ldi	r24, 0x2A	; 42
     20a:	11 c0       	rjmp	.+34     	; 0x22e <KeyPad_4x4_adjustKeyNumber+0x78>
				break;		
		case 9: return '1'; 
     20c:	81 e3       	ldi	r24, 0x31	; 49
     20e:	0f c0       	rjmp	.+30     	; 0x22e <KeyPad_4x4_adjustKeyNumber+0x78>
				break;
		case 10: return '2'; 
     210:	82 e3       	ldi	r24, 0x32	; 50
     212:	0d c0       	rjmp	.+26     	; 0x22e <KeyPad_4x4_adjustKeyNumber+0x78>
				break;
		case 11: return '3'; 
     214:	83 e3       	ldi	r24, 0x33	; 51
     216:	0b c0       	rjmp	.+22     	; 0x22e <KeyPad_4x4_adjustKeyNumber+0x78>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
     218:	8d e2       	ldi	r24, 0x2D	; 45
     21a:	09 c0       	rjmp	.+18     	; 0x22e <KeyPad_4x4_adjustKeyNumber+0x78>
				break;
		case 13: return '13';  /* ASCII of Enter */
     21c:	83 e3       	ldi	r24, 0x33	; 51
     21e:	07 c0       	rjmp	.+14     	; 0x22e <KeyPad_4x4_adjustKeyNumber+0x78>
				break;			
		case 14: return '0'; 
     220:	80 e3       	ldi	r24, 0x30	; 48
     222:	05 c0       	rjmp	.+10     	; 0x22e <KeyPad_4x4_adjustKeyNumber+0x78>
				break;
		case 15: return '='; /* ASCII Code of '=' */
     224:	8d e3       	ldi	r24, 0x3D	; 61
     226:	03 c0       	rjmp	.+6      	; 0x22e <KeyPad_4x4_adjustKeyNumber+0x78>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
     228:	8b e2       	ldi	r24, 0x2B	; 43
     22a:	01 c0       	rjmp	.+2      	; 0x22e <KeyPad_4x4_adjustKeyNumber+0x78>
				break;
		default: return button_number;								 						
     22c:	89 81       	ldd	r24, Y+1	; 0x01
	}
} 
     22e:	0f 90       	pop	r0
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	08 95       	ret

00000236 <LCD_sendCommand>:
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	cd b7       	in	r28, 0x3d	; 61
     23c:	de b7       	in	r29, 0x3e	; 62
     23e:	e9 97       	sbiw	r28, 0x39	; 57
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	f8 94       	cli
     244:	de bf       	out	0x3e, r29	; 62
     246:	0f be       	out	0x3f, r0	; 63
     248:	cd bf       	out	0x3d, r28	; 61
     24a:	89 af       	std	Y+57, r24	; 0x39
     24c:	85 e3       	ldi	r24, 0x35	; 53
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	25 e3       	ldi	r18, 0x35	; 53
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	f9 01       	movw	r30, r18
     256:	20 81       	ld	r18, Z
     258:	29 7f       	andi	r18, 0xF9	; 249
     25a:	fc 01       	movw	r30, r24
     25c:	20 83       	st	Z, r18
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	a0 ea       	ldi	r26, 0xA0	; 160
     264:	b0 e4       	ldi	r27, 0x40	; 64
     266:	89 83       	std	Y+1, r24	; 0x01
     268:	9a 83       	std	Y+2, r25	; 0x02
     26a:	ab 83       	std	Y+3, r26	; 0x03
     26c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     26e:	20 e0       	ldi	r18, 0x00	; 0
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	4a e7       	ldi	r20, 0x7A	; 122
     274:	53 e4       	ldi	r21, 0x43	; 67
     276:	69 81       	ldd	r22, Y+1	; 0x01
     278:	7a 81       	ldd	r23, Y+2	; 0x02
     27a:	8b 81       	ldd	r24, Y+3	; 0x03
     27c:	9c 81       	ldd	r25, Y+4	; 0x04
     27e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__mulsf3>
     282:	dc 01       	movw	r26, r24
     284:	cb 01       	movw	r24, r22
     286:	8f a7       	std	Y+47, r24	; 0x2f
     288:	98 ab       	std	Y+48, r25	; 0x30
     28a:	a9 ab       	std	Y+49, r26	; 0x31
     28c:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     28e:	20 e0       	ldi	r18, 0x00	; 0
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	40 e8       	ldi	r20, 0x80	; 128
     294:	5f e3       	ldi	r21, 0x3F	; 63
     296:	6f a5       	ldd	r22, Y+47	; 0x2f
     298:	78 a9       	ldd	r23, Y+48	; 0x30
     29a:	89 a9       	ldd	r24, Y+49	; 0x31
     29c:	9a a9       	ldd	r25, Y+50	; 0x32
     29e:	0e 94 4c 07 	call	0xe98	; 0xe98 <__cmpsf2>
     2a2:	88 23       	and	r24, r24
     2a4:	2c f4       	brge	.+10     	; 0x2b0 <LCD_sendCommand+0x7a>
		__ticks = 1;
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	9c ab       	std	Y+52, r25	; 0x34
     2ac:	8b ab       	std	Y+51, r24	; 0x33
     2ae:	3f c0       	rjmp	.+126    	; 0x32e <LCD_sendCommand+0xf8>
	else if (__tmp > 65535)
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	3f ef       	ldi	r19, 0xFF	; 255
     2b4:	4f e7       	ldi	r20, 0x7F	; 127
     2b6:	57 e4       	ldi	r21, 0x47	; 71
     2b8:	6f a5       	ldd	r22, Y+47	; 0x2f
     2ba:	78 a9       	ldd	r23, Y+48	; 0x30
     2bc:	89 a9       	ldd	r24, Y+49	; 0x31
     2be:	9a a9       	ldd	r25, Y+50	; 0x32
     2c0:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__gesf2>
     2c4:	18 16       	cp	r1, r24
     2c6:	4c f5       	brge	.+82     	; 0x31a <LCD_sendCommand+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2c8:	20 e0       	ldi	r18, 0x00	; 0
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	40 e2       	ldi	r20, 0x20	; 32
     2ce:	51 e4       	ldi	r21, 0x41	; 65
     2d0:	69 81       	ldd	r22, Y+1	; 0x01
     2d2:	7a 81       	ldd	r23, Y+2	; 0x02
     2d4:	8b 81       	ldd	r24, Y+3	; 0x03
     2d6:	9c 81       	ldd	r25, Y+4	; 0x04
     2d8:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__mulsf3>
     2dc:	dc 01       	movw	r26, r24
     2de:	cb 01       	movw	r24, r22
     2e0:	bc 01       	movw	r22, r24
     2e2:	cd 01       	movw	r24, r26
     2e4:	0e 94 51 07 	call	0xea2	; 0xea2 <__fixunssfsi>
     2e8:	dc 01       	movw	r26, r24
     2ea:	cb 01       	movw	r24, r22
     2ec:	9c ab       	std	Y+52, r25	; 0x34
     2ee:	8b ab       	std	Y+51, r24	; 0x33
     2f0:	0f c0       	rjmp	.+30     	; 0x310 <LCD_sendCommand+0xda>
     2f2:	89 e1       	ldi	r24, 0x19	; 25
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	9e ab       	std	Y+54, r25	; 0x36
     2f8:	8d ab       	std	Y+53, r24	; 0x35
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2fa:	8d a9       	ldd	r24, Y+53	; 0x35
     2fc:	9e a9       	ldd	r25, Y+54	; 0x36
     2fe:	01 97       	sbiw	r24, 0x01	; 1
     300:	f1 f7       	brne	.-4      	; 0x2fe <LCD_sendCommand+0xc8>
     302:	9e ab       	std	Y+54, r25	; 0x36
     304:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     306:	8b a9       	ldd	r24, Y+51	; 0x33
     308:	9c a9       	ldd	r25, Y+52	; 0x34
     30a:	01 97       	sbiw	r24, 0x01	; 1
     30c:	9c ab       	std	Y+52, r25	; 0x34
     30e:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     310:	8b a9       	ldd	r24, Y+51	; 0x33
     312:	9c a9       	ldd	r25, Y+52	; 0x34
     314:	89 2b       	or	r24, r25
     316:	69 f7       	brne	.-38     	; 0x2f2 <LCD_sendCommand+0xbc>
     318:	14 c0       	rjmp	.+40     	; 0x342 <LCD_sendCommand+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     31a:	6f a5       	ldd	r22, Y+47	; 0x2f
     31c:	78 a9       	ldd	r23, Y+48	; 0x30
     31e:	89 a9       	ldd	r24, Y+49	; 0x31
     320:	9a a9       	ldd	r25, Y+50	; 0x32
     322:	0e 94 51 07 	call	0xea2	; 0xea2 <__fixunssfsi>
     326:	dc 01       	movw	r26, r24
     328:	cb 01       	movw	r24, r22
     32a:	9c ab       	std	Y+52, r25	; 0x34
     32c:	8b ab       	std	Y+51, r24	; 0x33
     32e:	8b a9       	ldd	r24, Y+51	; 0x33
     330:	9c a9       	ldd	r25, Y+52	; 0x34
     332:	98 af       	std	Y+56, r25	; 0x38
     334:	8f ab       	std	Y+55, r24	; 0x37
     336:	8f a9       	ldd	r24, Y+55	; 0x37
     338:	98 ad       	ldd	r25, Y+56	; 0x38
     33a:	01 97       	sbiw	r24, 0x01	; 1
     33c:	f1 f7       	brne	.-4      	; 0x33a <LCD_sendCommand+0x104>
     33e:	98 af       	std	Y+56, r25	; 0x38
     340:	8f ab       	std	Y+55, r24	; 0x37
     342:	82 e3       	ldi	r24, 0x32	; 50
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	29 ad       	ldd	r18, Y+57	; 0x39
     348:	fc 01       	movw	r30, r24
     34a:	20 83       	st	Z, r18
     34c:	85 e3       	ldi	r24, 0x35	; 53
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	25 e3       	ldi	r18, 0x35	; 53
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	f9 01       	movw	r30, r18
     356:	20 81       	ld	r18, Z
     358:	28 60       	ori	r18, 0x08	; 8
     35a:	fc 01       	movw	r30, r24
     35c:	20 83       	st	Z, r18
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	a0 ea       	ldi	r26, 0xA0	; 160
     364:	b1 e4       	ldi	r27, 0x41	; 65
     366:	8d 83       	std	Y+5, r24	; 0x05
     368:	9e 83       	std	Y+6, r25	; 0x06
     36a:	af 83       	std	Y+7, r26	; 0x07
     36c:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     36e:	20 e0       	ldi	r18, 0x00	; 0
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	4a e7       	ldi	r20, 0x7A	; 122
     374:	53 e4       	ldi	r21, 0x43	; 67
     376:	6d 81       	ldd	r22, Y+5	; 0x05
     378:	7e 81       	ldd	r23, Y+6	; 0x06
     37a:	8f 81       	ldd	r24, Y+7	; 0x07
     37c:	98 85       	ldd	r25, Y+8	; 0x08
     37e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__mulsf3>
     382:	dc 01       	movw	r26, r24
     384:	cb 01       	movw	r24, r22
     386:	8d a3       	std	Y+37, r24	; 0x25
     388:	9e a3       	std	Y+38, r25	; 0x26
     38a:	af a3       	std	Y+39, r26	; 0x27
     38c:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	40 e8       	ldi	r20, 0x80	; 128
     394:	5f e3       	ldi	r21, 0x3F	; 63
     396:	6d a1       	ldd	r22, Y+37	; 0x25
     398:	7e a1       	ldd	r23, Y+38	; 0x26
     39a:	8f a1       	ldd	r24, Y+39	; 0x27
     39c:	98 a5       	ldd	r25, Y+40	; 0x28
     39e:	0e 94 4c 07 	call	0xe98	; 0xe98 <__cmpsf2>
     3a2:	88 23       	and	r24, r24
     3a4:	2c f4       	brge	.+10     	; 0x3b0 <LCD_sendCommand+0x17a>
		__ticks = 1;
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	9a a7       	std	Y+42, r25	; 0x2a
     3ac:	89 a7       	std	Y+41, r24	; 0x29
     3ae:	3f c0       	rjmp	.+126    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	else if (__tmp > 65535)
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	3f ef       	ldi	r19, 0xFF	; 255
     3b4:	4f e7       	ldi	r20, 0x7F	; 127
     3b6:	57 e4       	ldi	r21, 0x47	; 71
     3b8:	6d a1       	ldd	r22, Y+37	; 0x25
     3ba:	7e a1       	ldd	r23, Y+38	; 0x26
     3bc:	8f a1       	ldd	r24, Y+39	; 0x27
     3be:	98 a5       	ldd	r25, Y+40	; 0x28
     3c0:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__gesf2>
     3c4:	18 16       	cp	r1, r24
     3c6:	4c f5       	brge	.+82     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3c8:	20 e0       	ldi	r18, 0x00	; 0
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	40 e2       	ldi	r20, 0x20	; 32
     3ce:	51 e4       	ldi	r21, 0x41	; 65
     3d0:	6d 81       	ldd	r22, Y+5	; 0x05
     3d2:	7e 81       	ldd	r23, Y+6	; 0x06
     3d4:	8f 81       	ldd	r24, Y+7	; 0x07
     3d6:	98 85       	ldd	r25, Y+8	; 0x08
     3d8:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__mulsf3>
     3dc:	dc 01       	movw	r26, r24
     3de:	cb 01       	movw	r24, r22
     3e0:	bc 01       	movw	r22, r24
     3e2:	cd 01       	movw	r24, r26
     3e4:	0e 94 51 07 	call	0xea2	; 0xea2 <__fixunssfsi>
     3e8:	dc 01       	movw	r26, r24
     3ea:	cb 01       	movw	r24, r22
     3ec:	9a a7       	std	Y+42, r25	; 0x2a
     3ee:	89 a7       	std	Y+41, r24	; 0x29
     3f0:	0f c0       	rjmp	.+30     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     3f2:	89 e1       	ldi	r24, 0x19	; 25
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	9c a7       	std	Y+44, r25	; 0x2c
     3f8:	8b a7       	std	Y+43, r24	; 0x2b
     3fa:	8b a5       	ldd	r24, Y+43	; 0x2b
     3fc:	9c a5       	ldd	r25, Y+44	; 0x2c
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	f1 f7       	brne	.-4      	; 0x3fe <LCD_sendCommand+0x1c8>
     402:	9c a7       	std	Y+44, r25	; 0x2c
     404:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     406:	89 a5       	ldd	r24, Y+41	; 0x29
     408:	9a a5       	ldd	r25, Y+42	; 0x2a
     40a:	01 97       	sbiw	r24, 0x01	; 1
     40c:	9a a7       	std	Y+42, r25	; 0x2a
     40e:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     410:	89 a5       	ldd	r24, Y+41	; 0x29
     412:	9a a5       	ldd	r25, Y+42	; 0x2a
     414:	89 2b       	or	r24, r25
     416:	69 f7       	brne	.-38     	; 0x3f2 <LCD_sendCommand+0x1bc>
     418:	14 c0       	rjmp	.+40     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     41a:	6d a1       	ldd	r22, Y+37	; 0x25
     41c:	7e a1       	ldd	r23, Y+38	; 0x26
     41e:	8f a1       	ldd	r24, Y+39	; 0x27
     420:	98 a5       	ldd	r25, Y+40	; 0x28
     422:	0e 94 51 07 	call	0xea2	; 0xea2 <__fixunssfsi>
     426:	dc 01       	movw	r26, r24
     428:	cb 01       	movw	r24, r22
     42a:	9a a7       	std	Y+42, r25	; 0x2a
     42c:	89 a7       	std	Y+41, r24	; 0x29
     42e:	89 a5       	ldd	r24, Y+41	; 0x29
     430:	9a a5       	ldd	r25, Y+42	; 0x2a
     432:	9e a7       	std	Y+46, r25	; 0x2e
     434:	8d a7       	std	Y+45, r24	; 0x2d
     436:	8d a5       	ldd	r24, Y+45	; 0x2d
     438:	9e a5       	ldd	r25, Y+46	; 0x2e
     43a:	01 97       	sbiw	r24, 0x01	; 1
     43c:	f1 f7       	brne	.-4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     43e:	9e a7       	std	Y+46, r25	; 0x2e
     440:	8d a7       	std	Y+45, r24	; 0x2d
     442:	85 e3       	ldi	r24, 0x35	; 53
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	25 e3       	ldi	r18, 0x35	; 53
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	f9 01       	movw	r30, r18
     44c:	20 81       	ld	r18, Z
     44e:	27 7f       	andi	r18, 0xF7	; 247
     450:	fc 01       	movw	r30, r24
     452:	20 83       	st	Z, r18
     454:	82 e3       	ldi	r24, 0x32	; 50
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	22 e3       	ldi	r18, 0x32	; 50
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	f9 01       	movw	r30, r18
     45e:	20 81       	ld	r18, Z
     460:	2f 70       	andi	r18, 0x0F	; 15
     462:	fc 01       	movw	r30, r24
     464:	20 83       	st	Z, r18
     466:	82 e3       	ldi	r24, 0x32	; 50
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	29 ad       	ldd	r18, Y+57	; 0x39
     46c:	22 2f       	mov	r18, r18
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	22 95       	swap	r18
     472:	32 95       	swap	r19
     474:	30 7f       	andi	r19, 0xF0	; 240
     476:	32 27       	eor	r19, r18
     478:	20 7f       	andi	r18, 0xF0	; 240
     47a:	32 27       	eor	r19, r18
     47c:	fc 01       	movw	r30, r24
     47e:	20 83       	st	Z, r18
     480:	85 e3       	ldi	r24, 0x35	; 53
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	25 e3       	ldi	r18, 0x35	; 53
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	f9 01       	movw	r30, r18
     48a:	20 81       	ld	r18, Z
     48c:	28 60       	ori	r18, 0x08	; 8
     48e:	fc 01       	movw	r30, r24
     490:	20 83       	st	Z, r18
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	a0 ea       	ldi	r26, 0xA0	; 160
     498:	b1 e4       	ldi	r27, 0x41	; 65
     49a:	89 87       	std	Y+9, r24	; 0x09
     49c:	9a 87       	std	Y+10, r25	; 0x0a
     49e:	ab 87       	std	Y+11, r26	; 0x0b
     4a0:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	4a e7       	ldi	r20, 0x7A	; 122
     4a8:	53 e4       	ldi	r21, 0x43	; 67
     4aa:	69 85       	ldd	r22, Y+9	; 0x09
     4ac:	7a 85       	ldd	r23, Y+10	; 0x0a
     4ae:	8b 85       	ldd	r24, Y+11	; 0x0b
     4b0:	9c 85       	ldd	r25, Y+12	; 0x0c
     4b2:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__mulsf3>
     4b6:	dc 01       	movw	r26, r24
     4b8:	cb 01       	movw	r24, r22
     4ba:	8b 8f       	std	Y+27, r24	; 0x1b
     4bc:	9c 8f       	std	Y+28, r25	; 0x1c
     4be:	ad 8f       	std	Y+29, r26	; 0x1d
     4c0:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	40 e8       	ldi	r20, 0x80	; 128
     4c8:	5f e3       	ldi	r21, 0x3F	; 63
     4ca:	6b 8d       	ldd	r22, Y+27	; 0x1b
     4cc:	7c 8d       	ldd	r23, Y+28	; 0x1c
     4ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
     4d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     4d2:	0e 94 4c 07 	call	0xe98	; 0xe98 <__cmpsf2>
     4d6:	88 23       	and	r24, r24
     4d8:	2c f4       	brge	.+10     	; 0x4e4 <__stack+0x85>
		__ticks = 1;
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	98 a3       	std	Y+32, r25	; 0x20
     4e0:	8f 8f       	std	Y+31, r24	; 0x1f
     4e2:	3f c0       	rjmp	.+126    	; 0x562 <__stack+0x103>
	else if (__tmp > 65535)
     4e4:	20 e0       	ldi	r18, 0x00	; 0
     4e6:	3f ef       	ldi	r19, 0xFF	; 255
     4e8:	4f e7       	ldi	r20, 0x7F	; 127
     4ea:	57 e4       	ldi	r21, 0x47	; 71
     4ec:	6b 8d       	ldd	r22, Y+27	; 0x1b
     4ee:	7c 8d       	ldd	r23, Y+28	; 0x1c
     4f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     4f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     4f4:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__gesf2>
     4f8:	18 16       	cp	r1, r24
     4fa:	4c f5       	brge	.+82     	; 0x54e <__stack+0xef>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4fc:	20 e0       	ldi	r18, 0x00	; 0
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	40 e2       	ldi	r20, 0x20	; 32
     502:	51 e4       	ldi	r21, 0x41	; 65
     504:	69 85       	ldd	r22, Y+9	; 0x09
     506:	7a 85       	ldd	r23, Y+10	; 0x0a
     508:	8b 85       	ldd	r24, Y+11	; 0x0b
     50a:	9c 85       	ldd	r25, Y+12	; 0x0c
     50c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__mulsf3>
     510:	dc 01       	movw	r26, r24
     512:	cb 01       	movw	r24, r22
     514:	bc 01       	movw	r22, r24
     516:	cd 01       	movw	r24, r26
     518:	0e 94 51 07 	call	0xea2	; 0xea2 <__fixunssfsi>
     51c:	dc 01       	movw	r26, r24
     51e:	cb 01       	movw	r24, r22
     520:	98 a3       	std	Y+32, r25	; 0x20
     522:	8f 8f       	std	Y+31, r24	; 0x1f
     524:	0f c0       	rjmp	.+30     	; 0x544 <__stack+0xe5>
     526:	89 e1       	ldi	r24, 0x19	; 25
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	9a a3       	std	Y+34, r25	; 0x22
     52c:	89 a3       	std	Y+33, r24	; 0x21
     52e:	89 a1       	ldd	r24, Y+33	; 0x21
     530:	9a a1       	ldd	r25, Y+34	; 0x22
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <__stack+0xd3>
     536:	9a a3       	std	Y+34, r25	; 0x22
     538:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     53a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     53c:	98 a1       	ldd	r25, Y+32	; 0x20
     53e:	01 97       	sbiw	r24, 0x01	; 1
     540:	98 a3       	std	Y+32, r25	; 0x20
     542:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     544:	8f 8d       	ldd	r24, Y+31	; 0x1f
     546:	98 a1       	ldd	r25, Y+32	; 0x20
     548:	89 2b       	or	r24, r25
     54a:	69 f7       	brne	.-38     	; 0x526 <__stack+0xc7>
     54c:	14 c0       	rjmp	.+40     	; 0x576 <__stack+0x117>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     54e:	6b 8d       	ldd	r22, Y+27	; 0x1b
     550:	7c 8d       	ldd	r23, Y+28	; 0x1c
     552:	8d 8d       	ldd	r24, Y+29	; 0x1d
     554:	9e 8d       	ldd	r25, Y+30	; 0x1e
     556:	0e 94 51 07 	call	0xea2	; 0xea2 <__fixunssfsi>
     55a:	dc 01       	movw	r26, r24
     55c:	cb 01       	movw	r24, r22
     55e:	98 a3       	std	Y+32, r25	; 0x20
     560:	8f 8f       	std	Y+31, r24	; 0x1f
     562:	8f 8d       	ldd	r24, Y+31	; 0x1f
     564:	98 a1       	ldd	r25, Y+32	; 0x20
     566:	9c a3       	std	Y+36, r25	; 0x24
     568:	8b a3       	std	Y+35, r24	; 0x23
     56a:	8b a1       	ldd	r24, Y+35	; 0x23
     56c:	9c a1       	ldd	r25, Y+36	; 0x24
     56e:	01 97       	sbiw	r24, 0x01	; 1
     570:	f1 f7       	brne	.-4      	; 0x56e <__stack+0x10f>
     572:	9c a3       	std	Y+36, r25	; 0x24
     574:	8b a3       	std	Y+35, r24	; 0x23
     576:	85 e3       	ldi	r24, 0x35	; 53
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	25 e3       	ldi	r18, 0x35	; 53
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	f9 01       	movw	r30, r18
     580:	20 81       	ld	r18, Z
     582:	27 7f       	andi	r18, 0xF7	; 247
     584:	fc 01       	movw	r30, r24
     586:	20 83       	st	Z, r18
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	a0 ea       	ldi	r26, 0xA0	; 160
     58e:	b1 e4       	ldi	r27, 0x41	; 65
     590:	8d 87       	std	Y+13, r24	; 0x0d
     592:	9e 87       	std	Y+14, r25	; 0x0e
     594:	af 87       	std	Y+15, r26	; 0x0f
     596:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	4a e7       	ldi	r20, 0x7A	; 122
     59e:	53 e4       	ldi	r21, 0x43	; 67
     5a0:	6d 85       	ldd	r22, Y+13	; 0x0d
     5a2:	7e 85       	ldd	r23, Y+14	; 0x0e
     5a4:	8f 85       	ldd	r24, Y+15	; 0x0f
     5a6:	98 89       	ldd	r25, Y+16	; 0x10
     5a8:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__mulsf3>
     5ac:	dc 01       	movw	r26, r24
     5ae:	cb 01       	movw	r24, r22
     5b0:	89 8b       	std	Y+17, r24	; 0x11
     5b2:	9a 8b       	std	Y+18, r25	; 0x12
     5b4:	ab 8b       	std	Y+19, r26	; 0x13
     5b6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     5b8:	20 e0       	ldi	r18, 0x00	; 0
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	40 e8       	ldi	r20, 0x80	; 128
     5be:	5f e3       	ldi	r21, 0x3F	; 63
     5c0:	69 89       	ldd	r22, Y+17	; 0x11
     5c2:	7a 89       	ldd	r23, Y+18	; 0x12
     5c4:	8b 89       	ldd	r24, Y+19	; 0x13
     5c6:	9c 89       	ldd	r25, Y+20	; 0x14
     5c8:	0e 94 4c 07 	call	0xe98	; 0xe98 <__cmpsf2>
     5cc:	88 23       	and	r24, r24
     5ce:	2c f4       	brge	.+10     	; 0x5da <__stack+0x17b>
		__ticks = 1;
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	9e 8b       	std	Y+22, r25	; 0x16
     5d6:	8d 8b       	std	Y+21, r24	; 0x15
     5d8:	3f c0       	rjmp	.+126    	; 0x658 <__stack+0x1f9>
	else if (__tmp > 65535)
     5da:	20 e0       	ldi	r18, 0x00	; 0
     5dc:	3f ef       	ldi	r19, 0xFF	; 255
     5de:	4f e7       	ldi	r20, 0x7F	; 127
     5e0:	57 e4       	ldi	r21, 0x47	; 71
     5e2:	69 89       	ldd	r22, Y+17	; 0x11
     5e4:	7a 89       	ldd	r23, Y+18	; 0x12
     5e6:	8b 89       	ldd	r24, Y+19	; 0x13
     5e8:	9c 89       	ldd	r25, Y+20	; 0x14
     5ea:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__gesf2>
     5ee:	18 16       	cp	r1, r24
     5f0:	4c f5       	brge	.+82     	; 0x644 <__stack+0x1e5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	40 e2       	ldi	r20, 0x20	; 32
     5f8:	51 e4       	ldi	r21, 0x41	; 65
     5fa:	6d 85       	ldd	r22, Y+13	; 0x0d
     5fc:	7e 85       	ldd	r23, Y+14	; 0x0e
     5fe:	8f 85       	ldd	r24, Y+15	; 0x0f
     600:	98 89       	ldd	r25, Y+16	; 0x10
     602:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__mulsf3>
     606:	dc 01       	movw	r26, r24
     608:	cb 01       	movw	r24, r22
     60a:	bc 01       	movw	r22, r24
     60c:	cd 01       	movw	r24, r26
     60e:	0e 94 51 07 	call	0xea2	; 0xea2 <__fixunssfsi>
     612:	dc 01       	movw	r26, r24
     614:	cb 01       	movw	r24, r22
     616:	9e 8b       	std	Y+22, r25	; 0x16
     618:	8d 8b       	std	Y+21, r24	; 0x15
     61a:	0f c0       	rjmp	.+30     	; 0x63a <__stack+0x1db>
     61c:	89 e1       	ldi	r24, 0x19	; 25
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	98 8f       	std	Y+24, r25	; 0x18
     622:	8f 8b       	std	Y+23, r24	; 0x17
     624:	8f 89       	ldd	r24, Y+23	; 0x17
     626:	98 8d       	ldd	r25, Y+24	; 0x18
     628:	01 97       	sbiw	r24, 0x01	; 1
     62a:	f1 f7       	brne	.-4      	; 0x628 <__stack+0x1c9>
     62c:	98 8f       	std	Y+24, r25	; 0x18
     62e:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     630:	8d 89       	ldd	r24, Y+21	; 0x15
     632:	9e 89       	ldd	r25, Y+22	; 0x16
     634:	01 97       	sbiw	r24, 0x01	; 1
     636:	9e 8b       	std	Y+22, r25	; 0x16
     638:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     63a:	8d 89       	ldd	r24, Y+21	; 0x15
     63c:	9e 89       	ldd	r25, Y+22	; 0x16
     63e:	89 2b       	or	r24, r25
     640:	69 f7       	brne	.-38     	; 0x61c <__stack+0x1bd>
     642:	14 c0       	rjmp	.+40     	; 0x66c <__stack+0x20d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     644:	69 89       	ldd	r22, Y+17	; 0x11
     646:	7a 89       	ldd	r23, Y+18	; 0x12
     648:	8b 89       	ldd	r24, Y+19	; 0x13
     64a:	9c 89       	ldd	r25, Y+20	; 0x14
     64c:	0e 94 51 07 	call	0xea2	; 0xea2 <__fixunssfsi>
     650:	dc 01       	movw	r26, r24
     652:	cb 01       	movw	r24, r22
     654:	9e 8b       	std	Y+22, r25	; 0x16
     656:	8d 8b       	std	Y+21, r24	; 0x15
     658:	8d 89       	ldd	r24, Y+21	; 0x15
     65a:	9e 89       	ldd	r25, Y+22	; 0x16
     65c:	9a 8f       	std	Y+26, r25	; 0x1a
     65e:	89 8f       	std	Y+25, r24	; 0x19
     660:	89 8d       	ldd	r24, Y+25	; 0x19
     662:	9a 8d       	ldd	r25, Y+26	; 0x1a
     664:	01 97       	sbiw	r24, 0x01	; 1
     666:	f1 f7       	brne	.-4      	; 0x664 <__stack+0x205>
     668:	9a 8f       	std	Y+26, r25	; 0x1a
     66a:	89 8f       	std	Y+25, r24	; 0x19
     66c:	00 00       	nop
     66e:	e9 96       	adiw	r28, 0x39	; 57
     670:	0f b6       	in	r0, 0x3f	; 63
     672:	f8 94       	cli
     674:	de bf       	out	0x3e, r29	; 62
     676:	0f be       	out	0x3f, r0	; 63
     678:	cd bf       	out	0x3d, r28	; 61
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	08 95       	ret

00000680 <LCD_init>:
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	cd b7       	in	r28, 0x3d	; 61
     686:	de b7       	in	r29, 0x3e	; 62
     688:	81 e3       	ldi	r24, 0x31	; 49
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	21 e3       	ldi	r18, 0x31	; 49
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	f9 01       	movw	r30, r18
     692:	20 81       	ld	r18, Z
     694:	20 6f       	ori	r18, 0xF0	; 240
     696:	fc 01       	movw	r30, r24
     698:	20 83       	st	Z, r18
     69a:	84 e3       	ldi	r24, 0x34	; 52
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	24 e3       	ldi	r18, 0x34	; 52
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	f9 01       	movw	r30, r18
     6a4:	20 81       	ld	r18, Z
     6a6:	2f 60       	ori	r18, 0x0F	; 15
     6a8:	fc 01       	movw	r30, r24
     6aa:	20 83       	st	Z, r18
     6ac:	82 e0       	ldi	r24, 0x02	; 2
     6ae:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_sendCommand>
     6b2:	88 e2       	ldi	r24, 0x28	; 40
     6b4:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_sendCommand>
     6b8:	8c e0       	ldi	r24, 0x0C	; 12
     6ba:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_sendCommand>
     6be:	86 e0       	ldi	r24, 0x06	; 6
     6c0:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_sendCommand>
     6c4:	80 e8       	ldi	r24, 0x80	; 128
     6c6:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_sendCommand>
     6ca:	00 00       	nop
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	08 95       	ret

000006d2 <LCD_sendData>:
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
     6da:	e9 97       	sbiw	r28, 0x39	; 57
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	f8 94       	cli
     6e0:	de bf       	out	0x3e, r29	; 62
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	cd bf       	out	0x3d, r28	; 61
     6e6:	89 af       	std	Y+57, r24	; 0x39
     6e8:	85 e3       	ldi	r24, 0x35	; 53
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	25 e3       	ldi	r18, 0x35	; 53
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	f9 01       	movw	r30, r18
     6f2:	20 81       	ld	r18, Z
     6f4:	2b 7f       	andi	r18, 0xFB	; 251
     6f6:	fc 01       	movw	r30, r24
     6f8:	20 83       	st	Z, r18
     6fa:	85 e3       	ldi	r24, 0x35	; 53
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	25 e3       	ldi	r18, 0x35	; 53
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	f9 01       	movw	r30, r18
     704:	20 81       	ld	r18, Z
     706:	22 60       	ori	r18, 0x02	; 2
     708:	fc 01       	movw	r30, r24
     70a:	20 83       	st	Z, r18
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	a0 ea       	ldi	r26, 0xA0	; 160
     712:	b0 e4       	ldi	r27, 0x40	; 64
     714:	89 83       	std	Y+1, r24	; 0x01
     716:	9a 83       	std	Y+2, r25	; 0x02
     718:	ab 83       	std	Y+3, r26	; 0x03
     71a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     71c:	20 e0       	ldi	r18, 0x00	; 0
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	4a e7       	ldi	r20, 0x7A	; 122
     722:	53 e4       	ldi	r21, 0x43	; 67
     724:	69 81       	ldd	r22, Y+1	; 0x01
     726:	7a 81       	ldd	r23, Y+2	; 0x02
     728:	8b 81       	ldd	r24, Y+3	; 0x03
     72a:	9c 81       	ldd	r25, Y+4	; 0x04
     72c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__mulsf3>
     730:	dc 01       	movw	r26, r24
     732:	cb 01       	movw	r24, r22
     734:	8f a7       	std	Y+47, r24	; 0x2f
     736:	98 ab       	std	Y+48, r25	; 0x30
     738:	a9 ab       	std	Y+49, r26	; 0x31
     73a:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	40 e8       	ldi	r20, 0x80	; 128
     742:	5f e3       	ldi	r21, 0x3F	; 63
     744:	6f a5       	ldd	r22, Y+47	; 0x2f
     746:	78 a9       	ldd	r23, Y+48	; 0x30
     748:	89 a9       	ldd	r24, Y+49	; 0x31
     74a:	9a a9       	ldd	r25, Y+50	; 0x32
     74c:	0e 94 4c 07 	call	0xe98	; 0xe98 <__cmpsf2>
     750:	88 23       	and	r24, r24
     752:	2c f4       	brge	.+10     	; 0x75e <LCD_sendData+0x8c>
		__ticks = 1;
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	9c ab       	std	Y+52, r25	; 0x34
     75a:	8b ab       	std	Y+51, r24	; 0x33
     75c:	3f c0       	rjmp	.+126    	; 0x7dc <LCD_sendData+0x10a>
	else if (__tmp > 65535)
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	3f ef       	ldi	r19, 0xFF	; 255
     762:	4f e7       	ldi	r20, 0x7F	; 127
     764:	57 e4       	ldi	r21, 0x47	; 71
     766:	6f a5       	ldd	r22, Y+47	; 0x2f
     768:	78 a9       	ldd	r23, Y+48	; 0x30
     76a:	89 a9       	ldd	r24, Y+49	; 0x31
     76c:	9a a9       	ldd	r25, Y+50	; 0x32
     76e:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__gesf2>
     772:	18 16       	cp	r1, r24
     774:	4c f5       	brge	.+82     	; 0x7c8 <LCD_sendData+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     776:	20 e0       	ldi	r18, 0x00	; 0
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	40 e2       	ldi	r20, 0x20	; 32
     77c:	51 e4       	ldi	r21, 0x41	; 65
     77e:	69 81       	ldd	r22, Y+1	; 0x01
     780:	7a 81       	ldd	r23, Y+2	; 0x02
     782:	8b 81       	ldd	r24, Y+3	; 0x03
     784:	9c 81       	ldd	r25, Y+4	; 0x04
     786:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__mulsf3>
     78a:	dc 01       	movw	r26, r24
     78c:	cb 01       	movw	r24, r22
     78e:	bc 01       	movw	r22, r24
     790:	cd 01       	movw	r24, r26
     792:	0e 94 51 07 	call	0xea2	; 0xea2 <__fixunssfsi>
     796:	dc 01       	movw	r26, r24
     798:	cb 01       	movw	r24, r22
     79a:	9c ab       	std	Y+52, r25	; 0x34
     79c:	8b ab       	std	Y+51, r24	; 0x33
     79e:	0f c0       	rjmp	.+30     	; 0x7be <LCD_sendData+0xec>
     7a0:	89 e1       	ldi	r24, 0x19	; 25
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	9e ab       	std	Y+54, r25	; 0x36
     7a6:	8d ab       	std	Y+53, r24	; 0x35
     7a8:	8d a9       	ldd	r24, Y+53	; 0x35
     7aa:	9e a9       	ldd	r25, Y+54	; 0x36
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <LCD_sendData+0xda>
     7b0:	9e ab       	std	Y+54, r25	; 0x36
     7b2:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7b4:	8b a9       	ldd	r24, Y+51	; 0x33
     7b6:	9c a9       	ldd	r25, Y+52	; 0x34
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	9c ab       	std	Y+52, r25	; 0x34
     7bc:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7be:	8b a9       	ldd	r24, Y+51	; 0x33
     7c0:	9c a9       	ldd	r25, Y+52	; 0x34
     7c2:	89 2b       	or	r24, r25
     7c4:	69 f7       	brne	.-38     	; 0x7a0 <LCD_sendData+0xce>
     7c6:	14 c0       	rjmp	.+40     	; 0x7f0 <LCD_sendData+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7c8:	6f a5       	ldd	r22, Y+47	; 0x2f
     7ca:	78 a9       	ldd	r23, Y+48	; 0x30
     7cc:	89 a9       	ldd	r24, Y+49	; 0x31
     7ce:	9a a9       	ldd	r25, Y+50	; 0x32
     7d0:	0e 94 51 07 	call	0xea2	; 0xea2 <__fixunssfsi>
     7d4:	dc 01       	movw	r26, r24
     7d6:	cb 01       	movw	r24, r22
     7d8:	9c ab       	std	Y+52, r25	; 0x34
     7da:	8b ab       	std	Y+51, r24	; 0x33
     7dc:	8b a9       	ldd	r24, Y+51	; 0x33
     7de:	9c a9       	ldd	r25, Y+52	; 0x34
     7e0:	98 af       	std	Y+56, r25	; 0x38
     7e2:	8f ab       	std	Y+55, r24	; 0x37
     7e4:	8f a9       	ldd	r24, Y+55	; 0x37
     7e6:	98 ad       	ldd	r25, Y+56	; 0x38
     7e8:	01 97       	sbiw	r24, 0x01	; 1
     7ea:	f1 f7       	brne	.-4      	; 0x7e8 <LCD_sendData+0x116>
     7ec:	98 af       	std	Y+56, r25	; 0x38
     7ee:	8f ab       	std	Y+55, r24	; 0x37
     7f0:	82 e3       	ldi	r24, 0x32	; 50
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	22 e3       	ldi	r18, 0x32	; 50
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	f9 01       	movw	r30, r18
     7fa:	20 81       	ld	r18, Z
     7fc:	2f 70       	andi	r18, 0x0F	; 15
     7fe:	fc 01       	movw	r30, r24
     800:	20 83       	st	Z, r18
     802:	82 e3       	ldi	r24, 0x32	; 50
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	29 ad       	ldd	r18, Y+57	; 0x39
     808:	fc 01       	movw	r30, r24
     80a:	20 83       	st	Z, r18
     80c:	85 e3       	ldi	r24, 0x35	; 53
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	25 e3       	ldi	r18, 0x35	; 53
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	f9 01       	movw	r30, r18
     816:	20 81       	ld	r18, Z
     818:	28 60       	ori	r18, 0x08	; 8
     81a:	fc 01       	movw	r30, r24
     81c:	20 83       	st	Z, r18
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	a0 ea       	ldi	r26, 0xA0	; 160
     824:	b0 e4       	ldi	r27, 0x40	; 64
     826:	8d 83       	std	Y+5, r24	; 0x05
     828:	9e 83       	std	Y+6, r25	; 0x06
     82a:	af 83       	std	Y+7, r26	; 0x07
     82c:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	4a e7       	ldi	r20, 0x7A	; 122
     834:	53 e4       	ldi	r21, 0x43	; 67
     836:	6d 81       	ldd	r22, Y+5	; 0x05
     838:	7e 81       	ldd	r23, Y+6	; 0x06
     83a:	8f 81       	ldd	r24, Y+7	; 0x07
     83c:	98 85       	ldd	r25, Y+8	; 0x08
     83e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__mulsf3>
     842:	dc 01       	movw	r26, r24
     844:	cb 01       	movw	r24, r22
     846:	8d a3       	std	Y+37, r24	; 0x25
     848:	9e a3       	std	Y+38, r25	; 0x26
     84a:	af a3       	std	Y+39, r26	; 0x27
     84c:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	40 e8       	ldi	r20, 0x80	; 128
     854:	5f e3       	ldi	r21, 0x3F	; 63
     856:	6d a1       	ldd	r22, Y+37	; 0x25
     858:	7e a1       	ldd	r23, Y+38	; 0x26
     85a:	8f a1       	ldd	r24, Y+39	; 0x27
     85c:	98 a5       	ldd	r25, Y+40	; 0x28
     85e:	0e 94 4c 07 	call	0xe98	; 0xe98 <__cmpsf2>
     862:	88 23       	and	r24, r24
     864:	2c f4       	brge	.+10     	; 0x870 <LCD_sendData+0x19e>
		__ticks = 1;
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	9a a7       	std	Y+42, r25	; 0x2a
     86c:	89 a7       	std	Y+41, r24	; 0x29
     86e:	3f c0       	rjmp	.+126    	; 0x8ee <LCD_sendData+0x21c>
	else if (__tmp > 65535)
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	3f ef       	ldi	r19, 0xFF	; 255
     874:	4f e7       	ldi	r20, 0x7F	; 127
     876:	57 e4       	ldi	r21, 0x47	; 71
     878:	6d a1       	ldd	r22, Y+37	; 0x25
     87a:	7e a1       	ldd	r23, Y+38	; 0x26
     87c:	8f a1       	ldd	r24, Y+39	; 0x27
     87e:	98 a5       	ldd	r25, Y+40	; 0x28
     880:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__gesf2>
     884:	18 16       	cp	r1, r24
     886:	4c f5       	brge	.+82     	; 0x8da <LCD_sendData+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e2       	ldi	r20, 0x20	; 32
     88e:	51 e4       	ldi	r21, 0x41	; 65
     890:	6d 81       	ldd	r22, Y+5	; 0x05
     892:	7e 81       	ldd	r23, Y+6	; 0x06
     894:	8f 81       	ldd	r24, Y+7	; 0x07
     896:	98 85       	ldd	r25, Y+8	; 0x08
     898:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__mulsf3>
     89c:	dc 01       	movw	r26, r24
     89e:	cb 01       	movw	r24, r22
     8a0:	bc 01       	movw	r22, r24
     8a2:	cd 01       	movw	r24, r26
     8a4:	0e 94 51 07 	call	0xea2	; 0xea2 <__fixunssfsi>
     8a8:	dc 01       	movw	r26, r24
     8aa:	cb 01       	movw	r24, r22
     8ac:	9a a7       	std	Y+42, r25	; 0x2a
     8ae:	89 a7       	std	Y+41, r24	; 0x29
     8b0:	0f c0       	rjmp	.+30     	; 0x8d0 <LCD_sendData+0x1fe>
     8b2:	89 e1       	ldi	r24, 0x19	; 25
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	9c a7       	std	Y+44, r25	; 0x2c
     8b8:	8b a7       	std	Y+43, r24	; 0x2b
     8ba:	8b a5       	ldd	r24, Y+43	; 0x2b
     8bc:	9c a5       	ldd	r25, Y+44	; 0x2c
     8be:	01 97       	sbiw	r24, 0x01	; 1
     8c0:	f1 f7       	brne	.-4      	; 0x8be <LCD_sendData+0x1ec>
     8c2:	9c a7       	std	Y+44, r25	; 0x2c
     8c4:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8c6:	89 a5       	ldd	r24, Y+41	; 0x29
     8c8:	9a a5       	ldd	r25, Y+42	; 0x2a
     8ca:	01 97       	sbiw	r24, 0x01	; 1
     8cc:	9a a7       	std	Y+42, r25	; 0x2a
     8ce:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8d0:	89 a5       	ldd	r24, Y+41	; 0x29
     8d2:	9a a5       	ldd	r25, Y+42	; 0x2a
     8d4:	89 2b       	or	r24, r25
     8d6:	69 f7       	brne	.-38     	; 0x8b2 <LCD_sendData+0x1e0>
     8d8:	14 c0       	rjmp	.+40     	; 0x902 <LCD_sendData+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8da:	6d a1       	ldd	r22, Y+37	; 0x25
     8dc:	7e a1       	ldd	r23, Y+38	; 0x26
     8de:	8f a1       	ldd	r24, Y+39	; 0x27
     8e0:	98 a5       	ldd	r25, Y+40	; 0x28
     8e2:	0e 94 51 07 	call	0xea2	; 0xea2 <__fixunssfsi>
     8e6:	dc 01       	movw	r26, r24
     8e8:	cb 01       	movw	r24, r22
     8ea:	9a a7       	std	Y+42, r25	; 0x2a
     8ec:	89 a7       	std	Y+41, r24	; 0x29
     8ee:	89 a5       	ldd	r24, Y+41	; 0x29
     8f0:	9a a5       	ldd	r25, Y+42	; 0x2a
     8f2:	9e a7       	std	Y+46, r25	; 0x2e
     8f4:	8d a7       	std	Y+45, r24	; 0x2d
     8f6:	8d a5       	ldd	r24, Y+45	; 0x2d
     8f8:	9e a5       	ldd	r25, Y+46	; 0x2e
     8fa:	01 97       	sbiw	r24, 0x01	; 1
     8fc:	f1 f7       	brne	.-4      	; 0x8fa <LCD_sendData+0x228>
     8fe:	9e a7       	std	Y+46, r25	; 0x2e
     900:	8d a7       	std	Y+45, r24	; 0x2d
     902:	85 e3       	ldi	r24, 0x35	; 53
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	25 e3       	ldi	r18, 0x35	; 53
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	f9 01       	movw	r30, r18
     90c:	20 81       	ld	r18, Z
     90e:	27 7f       	andi	r18, 0xF7	; 247
     910:	fc 01       	movw	r30, r24
     912:	20 83       	st	Z, r18
     914:	82 e3       	ldi	r24, 0x32	; 50
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	22 e3       	ldi	r18, 0x32	; 50
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	f9 01       	movw	r30, r18
     91e:	20 81       	ld	r18, Z
     920:	2f 70       	andi	r18, 0x0F	; 15
     922:	fc 01       	movw	r30, r24
     924:	20 83       	st	Z, r18
     926:	82 e3       	ldi	r24, 0x32	; 50
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	29 ad       	ldd	r18, Y+57	; 0x39
     92c:	22 2f       	mov	r18, r18
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	22 95       	swap	r18
     932:	32 95       	swap	r19
     934:	30 7f       	andi	r19, 0xF0	; 240
     936:	32 27       	eor	r19, r18
     938:	20 7f       	andi	r18, 0xF0	; 240
     93a:	32 27       	eor	r19, r18
     93c:	fc 01       	movw	r30, r24
     93e:	20 83       	st	Z, r18
     940:	85 e3       	ldi	r24, 0x35	; 53
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	25 e3       	ldi	r18, 0x35	; 53
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	f9 01       	movw	r30, r18
     94a:	20 81       	ld	r18, Z
     94c:	28 60       	ori	r18, 0x08	; 8
     94e:	fc 01       	movw	r30, r24
     950:	20 83       	st	Z, r18
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	a0 ea       	ldi	r26, 0xA0	; 160
     958:	b0 e4       	ldi	r27, 0x40	; 64
     95a:	89 87       	std	Y+9, r24	; 0x09
     95c:	9a 87       	std	Y+10, r25	; 0x0a
     95e:	ab 87       	std	Y+11, r26	; 0x0b
     960:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	4a e7       	ldi	r20, 0x7A	; 122
     968:	53 e4       	ldi	r21, 0x43	; 67
     96a:	69 85       	ldd	r22, Y+9	; 0x09
     96c:	7a 85       	ldd	r23, Y+10	; 0x0a
     96e:	8b 85       	ldd	r24, Y+11	; 0x0b
     970:	9c 85       	ldd	r25, Y+12	; 0x0c
     972:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__mulsf3>
     976:	dc 01       	movw	r26, r24
     978:	cb 01       	movw	r24, r22
     97a:	8b 8f       	std	Y+27, r24	; 0x1b
     97c:	9c 8f       	std	Y+28, r25	; 0x1c
     97e:	ad 8f       	std	Y+29, r26	; 0x1d
     980:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	40 e8       	ldi	r20, 0x80	; 128
     988:	5f e3       	ldi	r21, 0x3F	; 63
     98a:	6b 8d       	ldd	r22, Y+27	; 0x1b
     98c:	7c 8d       	ldd	r23, Y+28	; 0x1c
     98e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     990:	9e 8d       	ldd	r25, Y+30	; 0x1e
     992:	0e 94 4c 07 	call	0xe98	; 0xe98 <__cmpsf2>
     996:	88 23       	and	r24, r24
     998:	2c f4       	brge	.+10     	; 0x9a4 <LCD_sendData+0x2d2>
		__ticks = 1;
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	98 a3       	std	Y+32, r25	; 0x20
     9a0:	8f 8f       	std	Y+31, r24	; 0x1f
     9a2:	3f c0       	rjmp	.+126    	; 0xa22 <LCD_sendData+0x350>
	else if (__tmp > 65535)
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	3f ef       	ldi	r19, 0xFF	; 255
     9a8:	4f e7       	ldi	r20, 0x7F	; 127
     9aa:	57 e4       	ldi	r21, 0x47	; 71
     9ac:	6b 8d       	ldd	r22, Y+27	; 0x1b
     9ae:	7c 8d       	ldd	r23, Y+28	; 0x1c
     9b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     9b4:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__gesf2>
     9b8:	18 16       	cp	r1, r24
     9ba:	4c f5       	brge	.+82     	; 0xa0e <LCD_sendData+0x33c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9bc:	20 e0       	ldi	r18, 0x00	; 0
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	40 e2       	ldi	r20, 0x20	; 32
     9c2:	51 e4       	ldi	r21, 0x41	; 65
     9c4:	69 85       	ldd	r22, Y+9	; 0x09
     9c6:	7a 85       	ldd	r23, Y+10	; 0x0a
     9c8:	8b 85       	ldd	r24, Y+11	; 0x0b
     9ca:	9c 85       	ldd	r25, Y+12	; 0x0c
     9cc:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__mulsf3>
     9d0:	dc 01       	movw	r26, r24
     9d2:	cb 01       	movw	r24, r22
     9d4:	bc 01       	movw	r22, r24
     9d6:	cd 01       	movw	r24, r26
     9d8:	0e 94 51 07 	call	0xea2	; 0xea2 <__fixunssfsi>
     9dc:	dc 01       	movw	r26, r24
     9de:	cb 01       	movw	r24, r22
     9e0:	98 a3       	std	Y+32, r25	; 0x20
     9e2:	8f 8f       	std	Y+31, r24	; 0x1f
     9e4:	0f c0       	rjmp	.+30     	; 0xa04 <LCD_sendData+0x332>
     9e6:	89 e1       	ldi	r24, 0x19	; 25
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	9a a3       	std	Y+34, r25	; 0x22
     9ec:	89 a3       	std	Y+33, r24	; 0x21
     9ee:	89 a1       	ldd	r24, Y+33	; 0x21
     9f0:	9a a1       	ldd	r25, Y+34	; 0x22
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	f1 f7       	brne	.-4      	; 0x9f2 <LCD_sendData+0x320>
     9f6:	9a a3       	std	Y+34, r25	; 0x22
     9f8:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
     9fc:	98 a1       	ldd	r25, Y+32	; 0x20
     9fe:	01 97       	sbiw	r24, 0x01	; 1
     a00:	98 a3       	std	Y+32, r25	; 0x20
     a02:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a04:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a06:	98 a1       	ldd	r25, Y+32	; 0x20
     a08:	89 2b       	or	r24, r25
     a0a:	69 f7       	brne	.-38     	; 0x9e6 <LCD_sendData+0x314>
     a0c:	14 c0       	rjmp	.+40     	; 0xa36 <LCD_sendData+0x364>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a0e:	6b 8d       	ldd	r22, Y+27	; 0x1b
     a10:	7c 8d       	ldd	r23, Y+28	; 0x1c
     a12:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a14:	9e 8d       	ldd	r25, Y+30	; 0x1e
     a16:	0e 94 51 07 	call	0xea2	; 0xea2 <__fixunssfsi>
     a1a:	dc 01       	movw	r26, r24
     a1c:	cb 01       	movw	r24, r22
     a1e:	98 a3       	std	Y+32, r25	; 0x20
     a20:	8f 8f       	std	Y+31, r24	; 0x1f
     a22:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a24:	98 a1       	ldd	r25, Y+32	; 0x20
     a26:	9c a3       	std	Y+36, r25	; 0x24
     a28:	8b a3       	std	Y+35, r24	; 0x23
     a2a:	8b a1       	ldd	r24, Y+35	; 0x23
     a2c:	9c a1       	ldd	r25, Y+36	; 0x24
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	f1 f7       	brne	.-4      	; 0xa2e <LCD_sendData+0x35c>
     a32:	9c a3       	std	Y+36, r25	; 0x24
     a34:	8b a3       	std	Y+35, r24	; 0x23
     a36:	85 e3       	ldi	r24, 0x35	; 53
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	25 e3       	ldi	r18, 0x35	; 53
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	f9 01       	movw	r30, r18
     a40:	20 81       	ld	r18, Z
     a42:	27 7f       	andi	r18, 0xF7	; 247
     a44:	fc 01       	movw	r30, r24
     a46:	20 83       	st	Z, r18
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	a0 ea       	ldi	r26, 0xA0	; 160
     a4e:	b1 e4       	ldi	r27, 0x41	; 65
     a50:	8d 87       	std	Y+13, r24	; 0x0d
     a52:	9e 87       	std	Y+14, r25	; 0x0e
     a54:	af 87       	std	Y+15, r26	; 0x0f
     a56:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	4a e7       	ldi	r20, 0x7A	; 122
     a5e:	53 e4       	ldi	r21, 0x43	; 67
     a60:	6d 85       	ldd	r22, Y+13	; 0x0d
     a62:	7e 85       	ldd	r23, Y+14	; 0x0e
     a64:	8f 85       	ldd	r24, Y+15	; 0x0f
     a66:	98 89       	ldd	r25, Y+16	; 0x10
     a68:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__mulsf3>
     a6c:	dc 01       	movw	r26, r24
     a6e:	cb 01       	movw	r24, r22
     a70:	89 8b       	std	Y+17, r24	; 0x11
     a72:	9a 8b       	std	Y+18, r25	; 0x12
     a74:	ab 8b       	std	Y+19, r26	; 0x13
     a76:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	40 e8       	ldi	r20, 0x80	; 128
     a7e:	5f e3       	ldi	r21, 0x3F	; 63
     a80:	69 89       	ldd	r22, Y+17	; 0x11
     a82:	7a 89       	ldd	r23, Y+18	; 0x12
     a84:	8b 89       	ldd	r24, Y+19	; 0x13
     a86:	9c 89       	ldd	r25, Y+20	; 0x14
     a88:	0e 94 4c 07 	call	0xe98	; 0xe98 <__cmpsf2>
     a8c:	88 23       	and	r24, r24
     a8e:	2c f4       	brge	.+10     	; 0xa9a <LCD_sendData+0x3c8>
		__ticks = 1;
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	9e 8b       	std	Y+22, r25	; 0x16
     a96:	8d 8b       	std	Y+21, r24	; 0x15
     a98:	3f c0       	rjmp	.+126    	; 0xb18 <LCD_sendData+0x446>
	else if (__tmp > 65535)
     a9a:	20 e0       	ldi	r18, 0x00	; 0
     a9c:	3f ef       	ldi	r19, 0xFF	; 255
     a9e:	4f e7       	ldi	r20, 0x7F	; 127
     aa0:	57 e4       	ldi	r21, 0x47	; 71
     aa2:	69 89       	ldd	r22, Y+17	; 0x11
     aa4:	7a 89       	ldd	r23, Y+18	; 0x12
     aa6:	8b 89       	ldd	r24, Y+19	; 0x13
     aa8:	9c 89       	ldd	r25, Y+20	; 0x14
     aaa:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__gesf2>
     aae:	18 16       	cp	r1, r24
     ab0:	4c f5       	brge	.+82     	; 0xb04 <LCD_sendData+0x432>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 e2       	ldi	r20, 0x20	; 32
     ab8:	51 e4       	ldi	r21, 0x41	; 65
     aba:	6d 85       	ldd	r22, Y+13	; 0x0d
     abc:	7e 85       	ldd	r23, Y+14	; 0x0e
     abe:	8f 85       	ldd	r24, Y+15	; 0x0f
     ac0:	98 89       	ldd	r25, Y+16	; 0x10
     ac2:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__mulsf3>
     ac6:	dc 01       	movw	r26, r24
     ac8:	cb 01       	movw	r24, r22
     aca:	bc 01       	movw	r22, r24
     acc:	cd 01       	movw	r24, r26
     ace:	0e 94 51 07 	call	0xea2	; 0xea2 <__fixunssfsi>
     ad2:	dc 01       	movw	r26, r24
     ad4:	cb 01       	movw	r24, r22
     ad6:	9e 8b       	std	Y+22, r25	; 0x16
     ad8:	8d 8b       	std	Y+21, r24	; 0x15
     ada:	0f c0       	rjmp	.+30     	; 0xafa <LCD_sendData+0x428>
     adc:	89 e1       	ldi	r24, 0x19	; 25
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	98 8f       	std	Y+24, r25	; 0x18
     ae2:	8f 8b       	std	Y+23, r24	; 0x17
     ae4:	8f 89       	ldd	r24, Y+23	; 0x17
     ae6:	98 8d       	ldd	r25, Y+24	; 0x18
     ae8:	01 97       	sbiw	r24, 0x01	; 1
     aea:	f1 f7       	brne	.-4      	; 0xae8 <LCD_sendData+0x416>
     aec:	98 8f       	std	Y+24, r25	; 0x18
     aee:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     af0:	8d 89       	ldd	r24, Y+21	; 0x15
     af2:	9e 89       	ldd	r25, Y+22	; 0x16
     af4:	01 97       	sbiw	r24, 0x01	; 1
     af6:	9e 8b       	std	Y+22, r25	; 0x16
     af8:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     afa:	8d 89       	ldd	r24, Y+21	; 0x15
     afc:	9e 89       	ldd	r25, Y+22	; 0x16
     afe:	89 2b       	or	r24, r25
     b00:	69 f7       	brne	.-38     	; 0xadc <LCD_sendData+0x40a>
     b02:	14 c0       	rjmp	.+40     	; 0xb2c <LCD_sendData+0x45a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b04:	69 89       	ldd	r22, Y+17	; 0x11
     b06:	7a 89       	ldd	r23, Y+18	; 0x12
     b08:	8b 89       	ldd	r24, Y+19	; 0x13
     b0a:	9c 89       	ldd	r25, Y+20	; 0x14
     b0c:	0e 94 51 07 	call	0xea2	; 0xea2 <__fixunssfsi>
     b10:	dc 01       	movw	r26, r24
     b12:	cb 01       	movw	r24, r22
     b14:	9e 8b       	std	Y+22, r25	; 0x16
     b16:	8d 8b       	std	Y+21, r24	; 0x15
     b18:	8d 89       	ldd	r24, Y+21	; 0x15
     b1a:	9e 89       	ldd	r25, Y+22	; 0x16
     b1c:	9a 8f       	std	Y+26, r25	; 0x1a
     b1e:	89 8f       	std	Y+25, r24	; 0x19
     b20:	89 8d       	ldd	r24, Y+25	; 0x19
     b22:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b24:	01 97       	sbiw	r24, 0x01	; 1
     b26:	f1 f7       	brne	.-4      	; 0xb24 <LCD_sendData+0x452>
     b28:	9a 8f       	std	Y+26, r25	; 0x1a
     b2a:	89 8f       	std	Y+25, r24	; 0x19
     b2c:	00 00       	nop
     b2e:	e9 96       	adiw	r28, 0x39	; 57
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	f8 94       	cli
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	cd bf       	out	0x3d, r28	; 61
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	08 95       	ret

00000b40 <LCD_string>:
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
     b44:	00 d0       	rcall	.+0      	; 0xb46 <LCD_string+0x6>
     b46:	cd b7       	in	r28, 0x3d	; 61
     b48:	de b7       	in	r29, 0x3e	; 62
     b4a:	9a 83       	std	Y+2, r25	; 0x02
     b4c:	89 83       	std	Y+1, r24	; 0x01
     b4e:	0b c0       	rjmp	.+22     	; 0xb66 <LCD_string+0x26>
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	9a 81       	ldd	r25, Y+2	; 0x02
     b54:	fc 01       	movw	r30, r24
     b56:	80 81       	ld	r24, Z
     b58:	0e 94 69 03 	call	0x6d2	; 0x6d2 <LCD_sendData>
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	9a 81       	ldd	r25, Y+2	; 0x02
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	9a 83       	std	Y+2, r25	; 0x02
     b64:	89 83       	std	Y+1, r24	; 0x01
     b66:	89 81       	ldd	r24, Y+1	; 0x01
     b68:	9a 81       	ldd	r25, Y+2	; 0x02
     b6a:	fc 01       	movw	r30, r24
     b6c:	80 81       	ld	r24, Z
     b6e:	88 23       	and	r24, r24
     b70:	79 f7       	brne	.-34     	; 0xb50 <LCD_string+0x10>
     b72:	00 00       	nop
     b74:	0f 90       	pop	r0
     b76:	0f 90       	pop	r0
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	08 95       	ret

00000b7e <LCD_cls>:
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_sendCommand>
     b8c:	00 00       	nop
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	08 95       	ret

00000b94 <LCD_goToRowColumn>:
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	00 d0       	rcall	.+0      	; 0xb9a <LCD_goToRowColumn+0x6>
     b9a:	1f 92       	push	r1
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
     ba0:	8a 83       	std	Y+2, r24	; 0x02
     ba2:	6b 83       	std	Y+3, r22	; 0x03
     ba4:	8a 81       	ldd	r24, Y+2	; 0x02
     ba6:	88 2f       	mov	r24, r24
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	81 30       	cpi	r24, 0x01	; 1
     bac:	91 05       	cpc	r25, r1
     bae:	79 f0       	breq	.+30     	; 0xbce <LCD_goToRowColumn+0x3a>
     bb0:	82 30       	cpi	r24, 0x02	; 2
     bb2:	91 05       	cpc	r25, r1
     bb4:	1c f4       	brge	.+6      	; 0xbbc <LCD_goToRowColumn+0x28>
     bb6:	89 2b       	or	r24, r25
     bb8:	39 f0       	breq	.+14     	; 0xbc8 <LCD_goToRowColumn+0x34>
     bba:	15 c0       	rjmp	.+42     	; 0xbe6 <LCD_goToRowColumn+0x52>
     bbc:	82 30       	cpi	r24, 0x02	; 2
     bbe:	91 05       	cpc	r25, r1
     bc0:	51 f0       	breq	.+20     	; 0xbd6 <LCD_goToRowColumn+0x42>
     bc2:	03 97       	sbiw	r24, 0x03	; 3
     bc4:	61 f0       	breq	.+24     	; 0xbde <LCD_goToRowColumn+0x4a>
     bc6:	0f c0       	rjmp	.+30     	; 0xbe6 <LCD_goToRowColumn+0x52>
     bc8:	8b 81       	ldd	r24, Y+3	; 0x03
     bca:	89 83       	std	Y+1, r24	; 0x01
     bcc:	0c c0       	rjmp	.+24     	; 0xbe6 <LCD_goToRowColumn+0x52>
     bce:	8b 81       	ldd	r24, Y+3	; 0x03
     bd0:	80 5c       	subi	r24, 0xC0	; 192
     bd2:	89 83       	std	Y+1, r24	; 0x01
     bd4:	08 c0       	rjmp	.+16     	; 0xbe6 <LCD_goToRowColumn+0x52>
     bd6:	8b 81       	ldd	r24, Y+3	; 0x03
     bd8:	80 5f       	subi	r24, 0xF0	; 240
     bda:	89 83       	std	Y+1, r24	; 0x01
     bdc:	04 c0       	rjmp	.+8      	; 0xbe6 <LCD_goToRowColumn+0x52>
     bde:	8b 81       	ldd	r24, Y+3	; 0x03
     be0:	80 5b       	subi	r24, 0xB0	; 176
     be2:	89 83       	std	Y+1, r24	; 0x01
     be4:	00 00       	nop
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	80 68       	ori	r24, 0x80	; 128
     bea:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_sendCommand>
     bee:	00 00       	nop
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	08 95       	ret

00000bfc <inti_of_program>:
#include "mainproject.h"
uint8 key,n;
uint8 x=0;
//**************************************************************************************************************************************************
void inti_of_program()//the LCD going to ask for password for true password type 2333.
{
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
	if(n=='1')
     c04:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <n>
     c08:	81 33       	cpi	r24, 0x31	; 49
     c0a:	71 f5       	brne	.+92     	; 0xc68 <inti_of_program+0x6c>
	{
		if(x==0)
     c0c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
     c10:	88 23       	and	r24, r24
     c12:	49 f4       	brne	.+18     	; 0xc26 <inti_of_program+0x2a>
		{
			LCD_cls();//it's function we call to clear the LCD.
     c14:	0e 94 bf 05 	call	0xb7e	; 0xb7e <LCD_cls>
			LCD_sendCommand(0x80);//it's function we call to make courser reach first row and first coloum.
     c18:	80 e8       	ldi	r24, 0x80	; 128
     c1a:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_sendCommand>
			LCD_string("password:");//it's function we call to write on the LCD "password:".
     c1e:	80 e6       	ldi	r24, 0x60	; 96
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	0e 94 a0 05 	call	0xb40	; 0xb40 <LCD_string>
		}
		x++;//the counter x will be add by 1 ever time it pass by that line.
     c26:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
     c2a:	8f 5f       	subi	r24, 0xFF	; 255
     c2c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__data_end>
		key = KeyPad_getPressedKey();//get the pressed button from keypad .
     c30:	0e 94 86 00 	call	0x10c	; 0x10c <KeyPad_getPressedKey>
     c34:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <key>
		delaycounter();//this function used to slow the response of keypad to prevent fill LCD and UART on Proteus.
     c38:	0e 94 59 00 	call	0xb2	; 0xb2 <delaycounter>
		UART_sendbyte(key);// send  to microcontroler 2 the key as UDR.
     c3c:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <key>
     c40:	0e 94 1f 07 	call	0xe3e	; 0xe3e <UART_sendbyte>
		if((key >= '0') && (key <= '9'))
     c44:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <key>
     c48:	80 33       	cpi	r24, 0x30	; 48
     c4a:	70 f0       	brcs	.+28     	; 0xc68 <inti_of_program+0x6c>
     c4c:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <key>
     c50:	8a 33       	cpi	r24, 0x3A	; 58
     c52:	50 f4       	brcc	.+20     	; 0xc68 <inti_of_program+0x6c>
		{
			LCD_sendData(key);//type on the LCD  the key we pushed if it in range (0-9).
     c54:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <key>
     c58:	0e 94 69 03 	call	0x6d2	; 0x6d2 <LCD_sendData>
			if(x==4)//if the x start to count  4 time it reset to o to  go to if (x=0) condition.
     c5c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
     c60:	84 30       	cpi	r24, 0x04	; 4
     c62:	11 f4       	brne	.+4      	; 0xc68 <inti_of_program+0x6c>
			{x=0;
     c64:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
			}
		}
	}
	
}
     c68:	00 00       	nop
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	08 95       	ret

00000c70 <true_password>:
//**************************************************************************************************************************************************
void true_password()//will enter this function when the password is true by receive 2 ON UDR.
{
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	cd b7       	in	r28, 0x3d	; 61
     c76:	de b7       	in	r29, 0x3e	; 62
	 if (n=='2')
     c78:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <n>
     c7c:	82 33       	cpi	r24, 0x32	; 50
     c7e:	39 f4       	brne	.+14     	; 0xc8e <true_password+0x1e>
	 {
		 LCD_sendCommand(0x80);//it's function we call to make courser reach first row and first coloum.
     c80:	80 e8       	ldi	r24, 0x80	; 128
     c82:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_sendCommand>
		 LCD_string("true password");//it's function we call to write on the LCD "true password".
     c86:	8a e6       	ldi	r24, 0x6A	; 106
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 a0 05 	call	0xb40	; 0xb40 <LCD_string>
	 }
	
}
     c8e:	00 00       	nop
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	08 95       	ret

00000c96 <false_password>:
//**************************************************************************************************************************************************
void false_password()//will enter this function when password is wrong by receive 3 on UDR/"n".
{
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
     c9e:	2e 97       	sbiw	r28, 0x0e	; 14
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	de bf       	out	0x3e, r29	; 62
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	cd bf       	out	0x3d, r28	; 61
	if (n=='3')
     caa:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <n>
     cae:	83 33       	cpi	r24, 0x33	; 51
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <false_password+0x1e>
     cb2:	79 c0       	rjmp	.+242    	; 0xda6 <false_password+0x110>
	{
		LCD_sendCommand(0x80);//it's function we call to make courser reach first row and first coloum.
     cb4:	80 e8       	ldi	r24, 0x80	; 128
     cb6:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_sendCommand>
		LCD_string("wrong password");//it's function we call to write on the LCD "wrong password".
     cba:	88 e7       	ldi	r24, 0x78	; 120
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 a0 05 	call	0xb40	; 0xb40 <LCD_string>
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	aa e7       	ldi	r26, 0x7A	; 122
     cc8:	b4 e4       	ldi	r27, 0x44	; 68
     cca:	89 83       	std	Y+1, r24	; 0x01
     ccc:	9a 83       	std	Y+2, r25	; 0x02
     cce:	ab 83       	std	Y+3, r26	; 0x03
     cd0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	4a e7       	ldi	r20, 0x7A	; 122
     cd8:	53 e4       	ldi	r21, 0x43	; 67
     cda:	69 81       	ldd	r22, Y+1	; 0x01
     cdc:	7a 81       	ldd	r23, Y+2	; 0x02
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	9c 81       	ldd	r25, Y+4	; 0x04
     ce2:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__mulsf3>
     ce6:	dc 01       	movw	r26, r24
     ce8:	cb 01       	movw	r24, r22
     cea:	8d 83       	std	Y+5, r24	; 0x05
     cec:	9e 83       	std	Y+6, r25	; 0x06
     cee:	af 83       	std	Y+7, r26	; 0x07
     cf0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	40 e8       	ldi	r20, 0x80	; 128
     cf8:	5f e3       	ldi	r21, 0x3F	; 63
     cfa:	6d 81       	ldd	r22, Y+5	; 0x05
     cfc:	7e 81       	ldd	r23, Y+6	; 0x06
     cfe:	8f 81       	ldd	r24, Y+7	; 0x07
     d00:	98 85       	ldd	r25, Y+8	; 0x08
     d02:	0e 94 4c 07 	call	0xe98	; 0xe98 <__cmpsf2>
     d06:	88 23       	and	r24, r24
     d08:	2c f4       	brge	.+10     	; 0xd14 <false_password+0x7e>
		__ticks = 1;
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	9a 87       	std	Y+10, r25	; 0x0a
     d10:	89 87       	std	Y+9, r24	; 0x09
     d12:	3f c0       	rjmp	.+126    	; 0xd92 <false_password+0xfc>
	else if (__tmp > 65535)
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	3f ef       	ldi	r19, 0xFF	; 255
     d18:	4f e7       	ldi	r20, 0x7F	; 127
     d1a:	57 e4       	ldi	r21, 0x47	; 71
     d1c:	6d 81       	ldd	r22, Y+5	; 0x05
     d1e:	7e 81       	ldd	r23, Y+6	; 0x06
     d20:	8f 81       	ldd	r24, Y+7	; 0x07
     d22:	98 85       	ldd	r25, Y+8	; 0x08
     d24:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__gesf2>
     d28:	18 16       	cp	r1, r24
     d2a:	4c f5       	brge	.+82     	; 0xd7e <false_password+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	40 e2       	ldi	r20, 0x20	; 32
     d32:	51 e4       	ldi	r21, 0x41	; 65
     d34:	69 81       	ldd	r22, Y+1	; 0x01
     d36:	7a 81       	ldd	r23, Y+2	; 0x02
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	9c 81       	ldd	r25, Y+4	; 0x04
     d3c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__mulsf3>
     d40:	dc 01       	movw	r26, r24
     d42:	cb 01       	movw	r24, r22
     d44:	bc 01       	movw	r22, r24
     d46:	cd 01       	movw	r24, r26
     d48:	0e 94 51 07 	call	0xea2	; 0xea2 <__fixunssfsi>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	9a 87       	std	Y+10, r25	; 0x0a
     d52:	89 87       	std	Y+9, r24	; 0x09
     d54:	0f c0       	rjmp	.+30     	; 0xd74 <false_password+0xde>
     d56:	89 e1       	ldi	r24, 0x19	; 25
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	9c 87       	std	Y+12, r25	; 0x0c
     d5c:	8b 87       	std	Y+11, r24	; 0x0b
     d5e:	8b 85       	ldd	r24, Y+11	; 0x0b
     d60:	9c 85       	ldd	r25, Y+12	; 0x0c
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	f1 f7       	brne	.-4      	; 0xd62 <false_password+0xcc>
     d66:	9c 87       	std	Y+12, r25	; 0x0c
     d68:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d6a:	89 85       	ldd	r24, Y+9	; 0x09
     d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	9a 87       	std	Y+10, r25	; 0x0a
     d72:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d74:	89 85       	ldd	r24, Y+9	; 0x09
     d76:	9a 85       	ldd	r25, Y+10	; 0x0a
     d78:	89 2b       	or	r24, r25
     d7a:	69 f7       	brne	.-38     	; 0xd56 <false_password+0xc0>
		_delay_ms(1000);//that will delay for few time to  not allow any one type on keypad and buzzer have time to work to call for security
	}
}
     d7c:	14 c0       	rjmp	.+40     	; 0xda6 <false_password+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7e:	6d 81       	ldd	r22, Y+5	; 0x05
     d80:	7e 81       	ldd	r23, Y+6	; 0x06
     d82:	8f 81       	ldd	r24, Y+7	; 0x07
     d84:	98 85       	ldd	r25, Y+8	; 0x08
     d86:	0e 94 51 07 	call	0xea2	; 0xea2 <__fixunssfsi>
     d8a:	dc 01       	movw	r26, r24
     d8c:	cb 01       	movw	r24, r22
     d8e:	9a 87       	std	Y+10, r25	; 0x0a
     d90:	89 87       	std	Y+9, r24	; 0x09
     d92:	89 85       	ldd	r24, Y+9	; 0x09
     d94:	9a 85       	ldd	r25, Y+10	; 0x0a
     d96:	9e 87       	std	Y+14, r25	; 0x0e
     d98:	8d 87       	std	Y+13, r24	; 0x0d
     d9a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d9c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d9e:	01 97       	sbiw	r24, 0x01	; 1
     da0:	f1 f7       	brne	.-4      	; 0xd9e <false_password+0x108>
     da2:	9e 87       	std	Y+14, r25	; 0x0e
     da4:	8d 87       	std	Y+13, r24	; 0x0d
     da6:	00 00       	nop
     da8:	2e 96       	adiw	r28, 0x0e	; 14
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	de bf       	out	0x3e, r29	; 62
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	08 95       	ret

00000dba <reset_a_3times>:
//**************************************************************************************************************************************************
void reset_a_3times()//if user enter password 3 times wrong the system just stop and cant accept any thing from keypad by receive 4 on UDR/"n".
{
     dba:	cf 93       	push	r28
     dbc:	df 93       	push	r29
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
	  if (n=='4')
     dc2:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <n>
     dc6:	84 33       	cpi	r24, 0x34	; 52
     dc8:	79 f4       	brne	.+30     	; 0xde8 <reset_a_3times+0x2e>
	  {
		  LCD_sendCommand(0x80);
     dca:	80 e8       	ldi	r24, 0x80	; 128
     dcc:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_sendCommand>
		  LCD_string("wrong password ");
     dd0:	87 e8       	ldi	r24, 0x87	; 135
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	0e 94 a0 05 	call	0xb40	; 0xb40 <LCD_string>
		  LCD_goToRowColumn(1,0);
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	0e 94 ca 05 	call	0xb94	; 0xb94 <LCD_goToRowColumn>
		  LCD_string("3 times reset ");
     de0:	87 e9       	ldi	r24, 0x97	; 151
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	0e 94 a0 05 	call	0xb40	; 0xb40 <LCD_string>
	  }	
}
     de8:	00 00       	nop
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	08 95       	ret

00000df0 <UART_init>:
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	8b e2       	ldi	r24, 0x2B	; 43
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	2b e2       	ldi	r18, 0x2B	; 43
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	f9 01       	movw	r30, r18
     e02:	20 81       	ld	r18, Z
     e04:	fc 01       	movw	r30, r24
     e06:	20 83       	st	Z, r18
     e08:	8a e2       	ldi	r24, 0x2A	; 42
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	2a e2       	ldi	r18, 0x2A	; 42
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	f9 01       	movw	r30, r18
     e12:	20 81       	ld	r18, Z
     e14:	28 61       	ori	r18, 0x18	; 24
     e16:	fc 01       	movw	r30, r24
     e18:	20 83       	st	Z, r18
     e1a:	80 e4       	ldi	r24, 0x40	; 64
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	20 e4       	ldi	r18, 0x40	; 64
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	f9 01       	movw	r30, r18
     e24:	20 81       	ld	r18, Z
     e26:	26 68       	ori	r18, 0x86	; 134
     e28:	fc 01       	movw	r30, r24
     e2a:	20 83       	st	Z, r18
     e2c:	89 e2       	ldi	r24, 0x29	; 41
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	27 e6       	ldi	r18, 0x67	; 103
     e32:	fc 01       	movw	r30, r24
     e34:	20 83       	st	Z, r18
     e36:	00 00       	nop
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	08 95       	ret

00000e3e <UART_sendbyte>:
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	1f 92       	push	r1
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	89 83       	std	Y+1, r24	; 0x01
     e4a:	00 00       	nop
     e4c:	8b e2       	ldi	r24, 0x2B	; 43
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	fc 01       	movw	r30, r24
     e52:	80 81       	ld	r24, Z
     e54:	88 2f       	mov	r24, r24
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	80 72       	andi	r24, 0x20	; 32
     e5a:	99 27       	eor	r25, r25
     e5c:	89 2b       	or	r24, r25
     e5e:	b1 f3       	breq	.-20     	; 0xe4c <UART_sendbyte+0xe>
     e60:	8c e2       	ldi	r24, 0x2C	; 44
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	29 81       	ldd	r18, Y+1	; 0x01
     e66:	fc 01       	movw	r30, r24
     e68:	20 83       	st	Z, r18
     e6a:	00 00       	nop
     e6c:	0f 90       	pop	r0
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	08 95       	ret

00000e74 <UART_recievebyte>:
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	00 00       	nop
     e7e:	8b e2       	ldi	r24, 0x2B	; 43
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	fc 01       	movw	r30, r24
     e84:	80 81       	ld	r24, Z
     e86:	88 23       	and	r24, r24
     e88:	d4 f7       	brge	.-12     	; 0xe7e <UART_recievebyte+0xa>
     e8a:	8c e2       	ldi	r24, 0x2C	; 44
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	fc 01       	movw	r30, r24
     e90:	80 81       	ld	r24, Z
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	08 95       	ret

00000e98 <__cmpsf2>:
     e98:	0e 94 80 07 	call	0xf00	; 0xf00 <__fp_cmp>
     e9c:	08 f4       	brcc	.+2      	; 0xea0 <__cmpsf2+0x8>
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	08 95       	ret

00000ea2 <__fixunssfsi>:
     ea2:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fp_splitA>
     ea6:	88 f0       	brcs	.+34     	; 0xeca <__fixunssfsi+0x28>
     ea8:	9f 57       	subi	r25, 0x7F	; 127
     eaa:	98 f0       	brcs	.+38     	; 0xed2 <__fixunssfsi+0x30>
     eac:	b9 2f       	mov	r27, r25
     eae:	99 27       	eor	r25, r25
     eb0:	b7 51       	subi	r27, 0x17	; 23
     eb2:	b0 f0       	brcs	.+44     	; 0xee0 <__fixunssfsi+0x3e>
     eb4:	e1 f0       	breq	.+56     	; 0xeee <__fixunssfsi+0x4c>
     eb6:	66 0f       	add	r22, r22
     eb8:	77 1f       	adc	r23, r23
     eba:	88 1f       	adc	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	1a f0       	brmi	.+6      	; 0xec6 <__fixunssfsi+0x24>
     ec0:	ba 95       	dec	r27
     ec2:	c9 f7       	brne	.-14     	; 0xeb6 <__fixunssfsi+0x14>
     ec4:	14 c0       	rjmp	.+40     	; 0xeee <__fixunssfsi+0x4c>
     ec6:	b1 30       	cpi	r27, 0x01	; 1
     ec8:	91 f0       	breq	.+36     	; 0xeee <__fixunssfsi+0x4c>
     eca:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__fp_zero>
     ece:	b1 e0       	ldi	r27, 0x01	; 1
     ed0:	08 95       	ret
     ed2:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__fp_zero>
     ed6:	67 2f       	mov	r22, r23
     ed8:	78 2f       	mov	r23, r24
     eda:	88 27       	eor	r24, r24
     edc:	b8 5f       	subi	r27, 0xF8	; 248
     ede:	39 f0       	breq	.+14     	; 0xeee <__fixunssfsi+0x4c>
     ee0:	b9 3f       	cpi	r27, 0xF9	; 249
     ee2:	cc f3       	brlt	.-14     	; 0xed6 <__fixunssfsi+0x34>
     ee4:	86 95       	lsr	r24
     ee6:	77 95       	ror	r23
     ee8:	67 95       	ror	r22
     eea:	b3 95       	inc	r27
     eec:	d9 f7       	brne	.-10     	; 0xee4 <__fixunssfsi+0x42>
     eee:	3e f4       	brtc	.+14     	; 0xefe <__fixunssfsi+0x5c>
     ef0:	90 95       	com	r25
     ef2:	80 95       	com	r24
     ef4:	70 95       	com	r23
     ef6:	61 95       	neg	r22
     ef8:	7f 4f       	sbci	r23, 0xFF	; 255
     efa:	8f 4f       	sbci	r24, 0xFF	; 255
     efc:	9f 4f       	sbci	r25, 0xFF	; 255
     efe:	08 95       	ret

00000f00 <__fp_cmp>:
     f00:	99 0f       	add	r25, r25
     f02:	00 08       	sbc	r0, r0
     f04:	55 0f       	add	r21, r21
     f06:	aa 0b       	sbc	r26, r26
     f08:	e0 e8       	ldi	r30, 0x80	; 128
     f0a:	fe ef       	ldi	r31, 0xFE	; 254
     f0c:	16 16       	cp	r1, r22
     f0e:	17 06       	cpc	r1, r23
     f10:	e8 07       	cpc	r30, r24
     f12:	f9 07       	cpc	r31, r25
     f14:	c0 f0       	brcs	.+48     	; 0xf46 <__fp_cmp+0x46>
     f16:	12 16       	cp	r1, r18
     f18:	13 06       	cpc	r1, r19
     f1a:	e4 07       	cpc	r30, r20
     f1c:	f5 07       	cpc	r31, r21
     f1e:	98 f0       	brcs	.+38     	; 0xf46 <__fp_cmp+0x46>
     f20:	62 1b       	sub	r22, r18
     f22:	73 0b       	sbc	r23, r19
     f24:	84 0b       	sbc	r24, r20
     f26:	95 0b       	sbc	r25, r21
     f28:	39 f4       	brne	.+14     	; 0xf38 <__fp_cmp+0x38>
     f2a:	0a 26       	eor	r0, r26
     f2c:	61 f0       	breq	.+24     	; 0xf46 <__fp_cmp+0x46>
     f2e:	23 2b       	or	r18, r19
     f30:	24 2b       	or	r18, r20
     f32:	25 2b       	or	r18, r21
     f34:	21 f4       	brne	.+8      	; 0xf3e <__fp_cmp+0x3e>
     f36:	08 95       	ret
     f38:	0a 26       	eor	r0, r26
     f3a:	09 f4       	brne	.+2      	; 0xf3e <__fp_cmp+0x3e>
     f3c:	a1 40       	sbci	r26, 0x01	; 1
     f3e:	a6 95       	lsr	r26
     f40:	8f ef       	ldi	r24, 0xFF	; 255
     f42:	81 1d       	adc	r24, r1
     f44:	81 1d       	adc	r24, r1
     f46:	08 95       	ret

00000f48 <__fp_split3>:
     f48:	57 fd       	sbrc	r21, 7
     f4a:	90 58       	subi	r25, 0x80	; 128
     f4c:	44 0f       	add	r20, r20
     f4e:	55 1f       	adc	r21, r21
     f50:	59 f0       	breq	.+22     	; 0xf68 <__fp_splitA+0x10>
     f52:	5f 3f       	cpi	r21, 0xFF	; 255
     f54:	71 f0       	breq	.+28     	; 0xf72 <__fp_splitA+0x1a>
     f56:	47 95       	ror	r20

00000f58 <__fp_splitA>:
     f58:	88 0f       	add	r24, r24
     f5a:	97 fb       	bst	r25, 7
     f5c:	99 1f       	adc	r25, r25
     f5e:	61 f0       	breq	.+24     	; 0xf78 <__fp_splitA+0x20>
     f60:	9f 3f       	cpi	r25, 0xFF	; 255
     f62:	79 f0       	breq	.+30     	; 0xf82 <__fp_splitA+0x2a>
     f64:	87 95       	ror	r24
     f66:	08 95       	ret
     f68:	12 16       	cp	r1, r18
     f6a:	13 06       	cpc	r1, r19
     f6c:	14 06       	cpc	r1, r20
     f6e:	55 1f       	adc	r21, r21
     f70:	f2 cf       	rjmp	.-28     	; 0xf56 <__fp_split3+0xe>
     f72:	46 95       	lsr	r20
     f74:	f1 df       	rcall	.-30     	; 0xf58 <__fp_splitA>
     f76:	08 c0       	rjmp	.+16     	; 0xf88 <__fp_splitA+0x30>
     f78:	16 16       	cp	r1, r22
     f7a:	17 06       	cpc	r1, r23
     f7c:	18 06       	cpc	r1, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	f1 cf       	rjmp	.-30     	; 0xf64 <__fp_splitA+0xc>
     f82:	86 95       	lsr	r24
     f84:	71 05       	cpc	r23, r1
     f86:	61 05       	cpc	r22, r1
     f88:	08 94       	sec
     f8a:	08 95       	ret

00000f8c <__fp_zero>:
     f8c:	e8 94       	clt

00000f8e <__fp_szero>:
     f8e:	bb 27       	eor	r27, r27
     f90:	66 27       	eor	r22, r22
     f92:	77 27       	eor	r23, r23
     f94:	cb 01       	movw	r24, r22
     f96:	97 f9       	bld	r25, 7
     f98:	08 95       	ret

00000f9a <__gesf2>:
     f9a:	0e 94 80 07 	call	0xf00	; 0xf00 <__fp_cmp>
     f9e:	08 f4       	brcc	.+2      	; 0xfa2 <__gesf2+0x8>
     fa0:	8f ef       	ldi	r24, 0xFF	; 255
     fa2:	08 95       	ret

00000fa4 <__mulsf3>:
     fa4:	0e 94 e5 07 	call	0xfca	; 0xfca <__mulsf3x>
     fa8:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <__fp_round>
     fac:	0e 94 48 08 	call	0x1090	; 0x1090 <__fp_pscA>
     fb0:	38 f0       	brcs	.+14     	; 0xfc0 <__mulsf3+0x1c>
     fb2:	0e 94 4f 08 	call	0x109e	; 0x109e <__fp_pscB>
     fb6:	20 f0       	brcs	.+8      	; 0xfc0 <__mulsf3+0x1c>
     fb8:	95 23       	and	r25, r21
     fba:	11 f0       	breq	.+4      	; 0xfc0 <__mulsf3+0x1c>
     fbc:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__fp_inf>
     fc0:	0c 94 45 08 	jmp	0x108a	; 0x108a <__fp_nan>
     fc4:	11 24       	eor	r1, r1
     fc6:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <__fp_szero>

00000fca <__mulsf3x>:
     fca:	0e 94 a4 07 	call	0xf48	; 0xf48 <__fp_split3>
     fce:	70 f3       	brcs	.-36     	; 0xfac <__mulsf3+0x8>

00000fd0 <__mulsf3_pse>:
     fd0:	95 9f       	mul	r25, r21
     fd2:	c1 f3       	breq	.-16     	; 0xfc4 <__mulsf3+0x20>
     fd4:	95 0f       	add	r25, r21
     fd6:	50 e0       	ldi	r21, 0x00	; 0
     fd8:	55 1f       	adc	r21, r21
     fda:	62 9f       	mul	r22, r18
     fdc:	f0 01       	movw	r30, r0
     fde:	72 9f       	mul	r23, r18
     fe0:	bb 27       	eor	r27, r27
     fe2:	f0 0d       	add	r31, r0
     fe4:	b1 1d       	adc	r27, r1
     fe6:	63 9f       	mul	r22, r19
     fe8:	aa 27       	eor	r26, r26
     fea:	f0 0d       	add	r31, r0
     fec:	b1 1d       	adc	r27, r1
     fee:	aa 1f       	adc	r26, r26
     ff0:	64 9f       	mul	r22, r20
     ff2:	66 27       	eor	r22, r22
     ff4:	b0 0d       	add	r27, r0
     ff6:	a1 1d       	adc	r26, r1
     ff8:	66 1f       	adc	r22, r22
     ffa:	82 9f       	mul	r24, r18
     ffc:	22 27       	eor	r18, r18
     ffe:	b0 0d       	add	r27, r0
    1000:	a1 1d       	adc	r26, r1
    1002:	62 1f       	adc	r22, r18
    1004:	73 9f       	mul	r23, r19
    1006:	b0 0d       	add	r27, r0
    1008:	a1 1d       	adc	r26, r1
    100a:	62 1f       	adc	r22, r18
    100c:	83 9f       	mul	r24, r19
    100e:	a0 0d       	add	r26, r0
    1010:	61 1d       	adc	r22, r1
    1012:	22 1f       	adc	r18, r18
    1014:	74 9f       	mul	r23, r20
    1016:	33 27       	eor	r19, r19
    1018:	a0 0d       	add	r26, r0
    101a:	61 1d       	adc	r22, r1
    101c:	23 1f       	adc	r18, r19
    101e:	84 9f       	mul	r24, r20
    1020:	60 0d       	add	r22, r0
    1022:	21 1d       	adc	r18, r1
    1024:	82 2f       	mov	r24, r18
    1026:	76 2f       	mov	r23, r22
    1028:	6a 2f       	mov	r22, r26
    102a:	11 24       	eor	r1, r1
    102c:	9f 57       	subi	r25, 0x7F	; 127
    102e:	50 40       	sbci	r21, 0x00	; 0
    1030:	9a f0       	brmi	.+38     	; 0x1058 <__mulsf3_pse+0x88>
    1032:	f1 f0       	breq	.+60     	; 0x1070 <__mulsf3_pse+0xa0>
    1034:	88 23       	and	r24, r24
    1036:	4a f0       	brmi	.+18     	; 0x104a <__mulsf3_pse+0x7a>
    1038:	ee 0f       	add	r30, r30
    103a:	ff 1f       	adc	r31, r31
    103c:	bb 1f       	adc	r27, r27
    103e:	66 1f       	adc	r22, r22
    1040:	77 1f       	adc	r23, r23
    1042:	88 1f       	adc	r24, r24
    1044:	91 50       	subi	r25, 0x01	; 1
    1046:	50 40       	sbci	r21, 0x00	; 0
    1048:	a9 f7       	brne	.-22     	; 0x1034 <__mulsf3_pse+0x64>
    104a:	9e 3f       	cpi	r25, 0xFE	; 254
    104c:	51 05       	cpc	r21, r1
    104e:	80 f0       	brcs	.+32     	; 0x1070 <__mulsf3_pse+0xa0>
    1050:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__fp_inf>
    1054:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <__fp_szero>
    1058:	5f 3f       	cpi	r21, 0xFF	; 255
    105a:	e4 f3       	brlt	.-8      	; 0x1054 <__mulsf3_pse+0x84>
    105c:	98 3e       	cpi	r25, 0xE8	; 232
    105e:	d4 f3       	brlt	.-12     	; 0x1054 <__mulsf3_pse+0x84>
    1060:	86 95       	lsr	r24
    1062:	77 95       	ror	r23
    1064:	67 95       	ror	r22
    1066:	b7 95       	ror	r27
    1068:	f7 95       	ror	r31
    106a:	e7 95       	ror	r30
    106c:	9f 5f       	subi	r25, 0xFF	; 255
    106e:	c1 f7       	brne	.-16     	; 0x1060 <__mulsf3_pse+0x90>
    1070:	fe 2b       	or	r31, r30
    1072:	88 0f       	add	r24, r24
    1074:	91 1d       	adc	r25, r1
    1076:	96 95       	lsr	r25
    1078:	87 95       	ror	r24
    107a:	97 f9       	bld	r25, 7
    107c:	08 95       	ret

0000107e <__fp_inf>:
    107e:	97 f9       	bld	r25, 7
    1080:	9f 67       	ori	r25, 0x7F	; 127
    1082:	80 e8       	ldi	r24, 0x80	; 128
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	08 95       	ret

0000108a <__fp_nan>:
    108a:	9f ef       	ldi	r25, 0xFF	; 255
    108c:	80 ec       	ldi	r24, 0xC0	; 192
    108e:	08 95       	ret

00001090 <__fp_pscA>:
    1090:	00 24       	eor	r0, r0
    1092:	0a 94       	dec	r0
    1094:	16 16       	cp	r1, r22
    1096:	17 06       	cpc	r1, r23
    1098:	18 06       	cpc	r1, r24
    109a:	09 06       	cpc	r0, r25
    109c:	08 95       	ret

0000109e <__fp_pscB>:
    109e:	00 24       	eor	r0, r0
    10a0:	0a 94       	dec	r0
    10a2:	12 16       	cp	r1, r18
    10a4:	13 06       	cpc	r1, r19
    10a6:	14 06       	cpc	r1, r20
    10a8:	05 06       	cpc	r0, r21
    10aa:	08 95       	ret

000010ac <__fp_round>:
    10ac:	09 2e       	mov	r0, r25
    10ae:	03 94       	inc	r0
    10b0:	00 0c       	add	r0, r0
    10b2:	11 f4       	brne	.+4      	; 0x10b8 <__fp_round+0xc>
    10b4:	88 23       	and	r24, r24
    10b6:	52 f0       	brmi	.+20     	; 0x10cc <__fp_round+0x20>
    10b8:	bb 0f       	add	r27, r27
    10ba:	40 f4       	brcc	.+16     	; 0x10cc <__fp_round+0x20>
    10bc:	bf 2b       	or	r27, r31
    10be:	11 f4       	brne	.+4      	; 0x10c4 <__fp_round+0x18>
    10c0:	60 ff       	sbrs	r22, 0
    10c2:	04 c0       	rjmp	.+8      	; 0x10cc <__fp_round+0x20>
    10c4:	6f 5f       	subi	r22, 0xFF	; 255
    10c6:	7f 4f       	sbci	r23, 0xFF	; 255
    10c8:	8f 4f       	sbci	r24, 0xFF	; 255
    10ca:	9f 4f       	sbci	r25, 0xFF	; 255
    10cc:	08 95       	ret

000010ce <__tablejump2__>:
    10ce:	ee 0f       	add	r30, r30
    10d0:	ff 1f       	adc	r31, r31
    10d2:	05 90       	lpm	r0, Z+
    10d4:	f4 91       	lpm	r31, Z
    10d6:	e0 2d       	mov	r30, r0
    10d8:	09 94       	ijmp

000010da <_exit>:
    10da:	f8 94       	cli

000010dc <__stop_program>:
    10dc:	ff cf       	rjmp	.-2      	; 0x10dc <__stop_program>
